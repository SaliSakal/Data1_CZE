// export def_main_base , def_secondary_base , def_defence_level , def_amount_of_people , def_initial_level , def_main_deposits , def_secondary_deposits , def_siberite_detection , def_starting_resources , def_shipments_density , def_people_arrivals , def_people_loyality , def_people_info , def_morale_flags , def_siberite_bomb , def_amount_of_apemen ; export is_depot , number_of_people , number_of_pplants , are_mines , is_lab , is_fact , is_arm , are_breastworks , deposits , initial_level , starting_crates , starting_resources , shipments_density , max_arriving_times , text_info , fog_info , def_bf_params , number_of_apemen ; export Side_Count , Team_Count , Positions , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names ; export second_side , third_nation ; export start_def , depots_def , breastworks_def , labs_def , factories_def , armories_def , pplants_def , deposits_def ; export commander ; var global_units , global_defined , soldiers_created ; function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i ; var u1 , u2 , pom_tab , p1 , p2 ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
  11: PPUSH
  12: PPUSH
  13: PPUSH
  14: PPUSH
// if MultiPlayer then
  15: LD_OWVAR 4
  19: IFFALSE 83
// begin Player_Side = mp_player_side ;
  21: LD_ADDR_EXP 38
  25: PUSH
  26: LD_OWVAR 7
  30: ST_TO_ADDR
// Player_Team = mp_player_team ;
  31: LD_ADDR_EXP 39
  35: PUSH
  36: LD_OWVAR 8
  40: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  41: LD_ADDR_EXP 42
  45: PUSH
  46: LD_OWVAR 17
  50: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  51: LD_ADDR_EXP 40
  55: PUSH
  56: LD_OWVAR 15
  60: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  61: LD_ADDR_EXP 43
  65: PUSH
  66: LD_OWVAR 16
  70: ST_TO_ADDR
// Teams = mp_teams ;
  71: LD_ADDR_EXP 41
  75: PUSH
  76: LD_OWVAR 12
  80: ST_TO_ADDR
// end else
  81: GO 223
// begin Player_Side = 3 ;
  83: LD_ADDR_EXP 38
  87: PUSH
  88: LD_INT 3
  90: ST_TO_ADDR
// Player_Team = 0 ;
  91: LD_ADDR_EXP 39
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// Side_Positions = [ 0 , 0 , 2 , 0 , 1 , 0 , 0 , 0 ] ;
  99: LD_ADDR_EXP 42
 103: PUSH
 104: LD_INT 0
 106: PUSH
 107: LD_INT 0
 109: PUSH
 110: LD_INT 2
 112: PUSH
 113: LD_INT 0
 115: PUSH
 116: LD_INT 1
 118: PUSH
 119: LD_INT 0
 121: PUSH
 122: LD_INT 0
 124: PUSH
 125: LD_INT 0
 127: PUSH
 128: EMPTY
 129: LIST
 130: LIST
 131: LIST
 132: LIST
 133: LIST
 134: LIST
 135: LIST
 136: LIST
 137: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 138: LD_ADDR_EXP 40
 142: PUSH
 143: LD_INT 0
 145: PUSH
 146: LD_INT 0
 148: PUSH
 149: LD_INT 0
 151: PUSH
 152: LD_INT 0
 154: PUSH
 155: LD_INT 0
 157: PUSH
 158: LD_INT 0
 160: PUSH
 161: LD_INT 0
 163: PUSH
 164: LD_INT 0
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: LIST
 176: ST_TO_ADDR
// Side_Nations = [ 0 , 0 , 3 , 0 , 2 , 0 , 0 , 0 ] ;
 177: LD_ADDR_EXP 43
 181: PUSH
 182: LD_INT 0
 184: PUSH
 185: LD_INT 0
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 0
 193: PUSH
 194: LD_INT 2
 196: PUSH
 197: LD_INT 0
 199: PUSH
 200: LD_INT 0
 202: PUSH
 203: LD_INT 0
 205: PUSH
 206: EMPTY
 207: LIST
 208: LIST
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: LIST
 214: LIST
 215: ST_TO_ADDR
// Teams = [ ] ;
 216: LD_ADDR_EXP 41
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// end ; p1 := 0 ;
 223: LD_ADDR_VAR 0 12
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// p2 := 0 ;
 231: LD_ADDR_VAR 0 13
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// for i := 1 to 8 do
 239: LD_ADDR_VAR 0 8
 243: PUSH
 244: DOUBLE
 245: LD_INT 1
 247: DEC
 248: ST_TO_ADDR
 249: LD_INT 8
 251: PUSH
 252: FOR_TO
 253: IFFALSE 311
// if Side_Positions [ i ] = 1 then
 255: LD_EXP 42
 259: PUSH
 260: LD_VAR 0 8
 264: ARRAY
 265: PUSH
 266: LD_INT 1
 268: EQUAL
 269: IFFALSE 283
// p1 := i else
 271: LD_ADDR_VAR 0 12
 275: PUSH
 276: LD_VAR 0 8
 280: ST_TO_ADDR
 281: GO 309
// if Side_Positions [ i ] = 2 then
 283: LD_EXP 42
 287: PUSH
 288: LD_VAR 0 8
 292: ARRAY
 293: PUSH
 294: LD_INT 2
 296: EQUAL
 297: IFFALSE 309
// p2 := i ;
 299: LD_ADDR_VAR 0 13
 303: PUSH
 304: LD_VAR 0 8
 308: ST_TO_ADDR
 309: GO 252
 311: POP
 312: POP
// Positions := [ p1 , p2 ] ;
 313: LD_ADDR_EXP 37
 317: PUSH
 318: LD_VAR 0 12
 322: PUSH
 323: LD_VAR 0 13
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: ST_TO_ADDR
// Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 332: LD_ADDR_EXP 35
 336: PUSH
 337: LD_EXP 42
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: EMPTY
 346: LIST
 347: DIFF
 348: PUSH
 349: LD_INT 0
 351: PLUS
 352: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
 353: LD_ADDR_EXP 36
 357: PUSH
 358: LD_EXP 40
 362: PUSH
 363: LD_INT 0
 365: PUSH
 366: EMPTY
 367: LIST
 368: DIFF
 369: PUSH
 370: LD_INT 0
 372: PLUS
 373: ST_TO_ADDR
// if MultiPlayer then
 374: LD_OWVAR 4
 378: IFFALSE 590
// begin def_main_base = GetMultiplayerSetting ( 0 ) ;
 380: LD_ADDR_EXP 1
 384: PUSH
 385: LD_INT 0
 387: PPUSH
 388: CALL_OW 426
 392: ST_TO_ADDR
// def_secondary_base = GetMultiplayerSetting ( 1 ) ;
 393: LD_ADDR_EXP 2
 397: PUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 426
 405: ST_TO_ADDR
// def_defence_level = GetMultiplayerSetting ( 2 ) ;
 406: LD_ADDR_EXP 3
 410: PUSH
 411: LD_INT 2
 413: PPUSH
 414: CALL_OW 426
 418: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 3 ) ;
 419: LD_ADDR_EXP 4
 423: PUSH
 424: LD_INT 3
 426: PPUSH
 427: CALL_OW 426
 431: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 4 ) ;
 432: LD_ADDR_EXP 5
 436: PUSH
 437: LD_INT 4
 439: PPUSH
 440: CALL_OW 426
 444: ST_TO_ADDR
// def_main_deposits = GetMultiplayerSetting ( 5 ) ;
 445: LD_ADDR_EXP 6
 449: PUSH
 450: LD_INT 5
 452: PPUSH
 453: CALL_OW 426
 457: ST_TO_ADDR
// def_secondary_deposits = GetMultiplayerSetting ( 6 ) ;
 458: LD_ADDR_EXP 7
 462: PUSH
 463: LD_INT 6
 465: PPUSH
 466: CALL_OW 426
 470: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 7 ) ;
 471: LD_ADDR_EXP 8
 475: PUSH
 476: LD_INT 7
 478: PPUSH
 479: CALL_OW 426
 483: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 8 ) ;
 484: LD_ADDR_EXP 9
 488: PUSH
 489: LD_INT 8
 491: PPUSH
 492: CALL_OW 426
 496: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 9 ) ;
 497: LD_ADDR_EXP 10
 501: PUSH
 502: LD_INT 9
 504: PPUSH
 505: CALL_OW 426
 509: ST_TO_ADDR
// def_people_arrivals = GetMultiplayerSetting ( 10 ) ;
 510: LD_ADDR_EXP 11
 514: PUSH
 515: LD_INT 10
 517: PPUSH
 518: CALL_OW 426
 522: ST_TO_ADDR
// def_people_loyality = GetMultiplayerSetting ( 11 ) ;
 523: LD_ADDR_EXP 12
 527: PUSH
 528: LD_INT 11
 530: PPUSH
 531: CALL_OW 426
 535: ST_TO_ADDR
// def_people_info = GetMultiplayerSetting ( 12 ) ;
 536: LD_ADDR_EXP 13
 540: PUSH
 541: LD_INT 12
 543: PPUSH
 544: CALL_OW 426
 548: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 15 ) ;
 549: LD_ADDR_EXP 14
 553: PUSH
 554: LD_INT 15
 556: PPUSH
 557: CALL_OW 426
 561: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 16 ) ;
 562: LD_ADDR_EXP 15
 566: PUSH
 567: LD_INT 16
 569: PPUSH
 570: CALL_OW 426
 574: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 17 ) ;
 575: LD_ADDR_EXP 16
 579: PUSH
 580: LD_INT 17
 582: PPUSH
 583: CALL_OW 426
 587: ST_TO_ADDR
// end else
 588: GO 722
// begin randomize ;
 590: CALL_OW 10
// def_main_base = 4 ;
 594: LD_ADDR_EXP 1
 598: PUSH
 599: LD_INT 4
 601: ST_TO_ADDR
// def_secondary_base = 2 ;
 602: LD_ADDR_EXP 2
 606: PUSH
 607: LD_INT 2
 609: ST_TO_ADDR
// def_defence_level = 1 ;
 610: LD_ADDR_EXP 3
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
// def_amount_of_people = 2 ;
 618: LD_ADDR_EXP 4
 622: PUSH
 623: LD_INT 2
 625: ST_TO_ADDR
// def_initial_level = 1 ;
 626: LD_ADDR_EXP 5
 630: PUSH
 631: LD_INT 1
 633: ST_TO_ADDR
// def_main_deposits = 2 ;
 634: LD_ADDR_EXP 6
 638: PUSH
 639: LD_INT 2
 641: ST_TO_ADDR
// def_secondary_deposits = 1 ;
 642: LD_ADDR_EXP 7
 646: PUSH
 647: LD_INT 1
 649: ST_TO_ADDR
// def_siberite_detection = 1 ;
 650: LD_ADDR_EXP 8
 654: PUSH
 655: LD_INT 1
 657: ST_TO_ADDR
// def_starting_resources = 2 ;
 658: LD_ADDR_EXP 9
 662: PUSH
 663: LD_INT 2
 665: ST_TO_ADDR
// def_shipments_density = 1 ;
 666: LD_ADDR_EXP 10
 670: PUSH
 671: LD_INT 1
 673: ST_TO_ADDR
// def_people_arrivals = 3 ;
 674: LD_ADDR_EXP 11
 678: PUSH
 679: LD_INT 3
 681: ST_TO_ADDR
// def_people_loyality = 1 ;
 682: LD_ADDR_EXP 12
 686: PUSH
 687: LD_INT 1
 689: ST_TO_ADDR
// def_people_info = 1 ;
 690: LD_ADDR_EXP 13
 694: PUSH
 695: LD_INT 1
 697: ST_TO_ADDR
// def_morale_flags = 2 ;
 698: LD_ADDR_EXP 14
 702: PUSH
 703: LD_INT 2
 705: ST_TO_ADDR
// def_siberite_bomb = 1 ;
 706: LD_ADDR_EXP 15
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
// def_amount_of_apemen = 0 ;
 714: LD_ADDR_EXP 16
 718: PUSH
 719: LD_INT 0
 721: ST_TO_ADDR
// end ; u1 = [ 0 , 1 , 1 , 1 , 2 ] [ def_main_base + 1 ] ;
 722: LD_ADDR_VAR 0 9
 726: PUSH
 727: LD_INT 0
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: LD_INT 1
 735: PUSH
 736: LD_INT 1
 738: PUSH
 739: LD_INT 2
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: PUSH
 749: LD_EXP 1
 753: PUSH
 754: LD_INT 1
 756: PLUS
 757: ARRAY
 758: ST_TO_ADDR
// u2 = [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] ;
 759: LD_ADDR_VAR 0 10
 763: PUSH
 764: LD_INT 0
 766: PUSH
 767: LD_INT 1
 769: PUSH
 770: LD_INT 1
 772: PUSH
 773: LD_INT 2
 775: PUSH
 776: LD_INT 2
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: PUSH
 786: LD_EXP 1
 790: PUSH
 791: LD_INT 1
 793: PLUS
 794: ARRAY
 795: ST_TO_ADDR
// is_depot = [ [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] , [ 0 , 1 , 1 ] [ def_secondary_base + 1 ] ] ;
 796: LD_ADDR_EXP 17
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: LD_INT 1
 806: PUSH
 807: LD_INT 1
 809: PUSH
 810: LD_INT 2
 812: PUSH
 813: LD_INT 2
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: PUSH
 823: LD_EXP 1
 827: PUSH
 828: LD_INT 1
 830: PLUS
 831: ARRAY
 832: PUSH
 833: LD_INT 0
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 1
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: LD_EXP 2
 851: PUSH
 852: LD_INT 1
 854: PLUS
 855: ARRAY
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// if is_depot [ 2 ] then
 861: LD_EXP 17
 865: PUSH
 866: LD_INT 2
 868: ARRAY
 869: IFFALSE 1004
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ [ ] , [ 1 ] , [ 1 , 1 ] , [ 1 , 1 , 1 ] ] [ def_defence_level ] ] else
 871: LD_ADDR_EXP 24
 875: PUSH
 876: EMPTY
 877: PUSH
 878: LD_VAR 0 10
 882: PUSH
 883: LD_VAR 0 9
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: LD_VAR 0 10
 896: PUSH
 897: LD_VAR 0 10
 901: PUSH
 902: LD_VAR 0 9
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: PUSH
 912: LD_VAR 0 10
 916: PUSH
 917: LD_VAR 0 10
 921: PUSH
 922: LD_VAR 0 9
 926: PUSH
 927: LD_VAR 0 9
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: LIST
 936: LIST
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PUSH
 944: LD_EXP 3
 948: PUSH
 949: LD_INT 1
 951: PLUS
 952: ARRAY
 953: PUSH
 954: EMPTY
 955: PUSH
 956: LD_INT 1
 958: PUSH
 959: EMPTY
 960: LIST
 961: PUSH
 962: LD_INT 1
 964: PUSH
 965: LD_INT 1
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: LD_INT 1
 977: PUSH
 978: LD_INT 1
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: LIST
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: PUSH
 992: LD_EXP 3
 996: ARRAY
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: ST_TO_ADDR
1002: GO 1093
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ ] ] ;
1004: LD_ADDR_EXP 24
1008: PUSH
1009: EMPTY
1010: PUSH
1011: LD_VAR 0 10
1015: PUSH
1016: LD_VAR 0 9
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_VAR 0 10
1029: PUSH
1030: LD_VAR 0 10
1034: PUSH
1035: LD_VAR 0 9
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: LIST
1044: PUSH
1045: LD_VAR 0 10
1049: PUSH
1050: LD_VAR 0 10
1054: PUSH
1055: LD_VAR 0 9
1059: PUSH
1060: LD_VAR 0 9
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: PUSH
1077: LD_EXP 3
1081: PUSH
1082: LD_INT 1
1084: PLUS
1085: ARRAY
1086: PUSH
1087: EMPTY
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: ST_TO_ADDR
// is_fact = [ [ 0 , 0 , 1 , 2 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1093: LD_ADDR_EXP 22
1097: PUSH
1098: LD_INT 0
1100: PUSH
1101: LD_INT 0
1103: PUSH
1104: LD_INT 1
1106: PUSH
1107: LD_INT 2
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: LD_EXP 1
1124: PUSH
1125: LD_INT 1
1127: PLUS
1128: ARRAY
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: ST_TO_ADDR
// is_lab = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1137: LD_ADDR_EXP 21
1141: PUSH
1142: LD_INT 0
1144: PUSH
1145: LD_INT 0
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: LD_INT 2
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_EXP 1
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: PUSH
1174: LD_INT 0
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: ST_TO_ADDR
// is_arm = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1181: LD_ADDR_EXP 23
1185: PUSH
1186: LD_INT 0
1188: PUSH
1189: LD_INT 0
1191: PUSH
1192: LD_INT 1
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 2
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_EXP 1
1212: PUSH
1213: LD_INT 1
1215: PLUS
1216: ARRAY
1217: PUSH
1218: LD_INT 0
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: ST_TO_ADDR
// are_mines = [ [ 0 , 0 , 0 , 1 , 1 ] [ def_main_base + 1 ] , [ 0 , 0 , 1 ] [ def_secondary_base + 1 ] ] ;
1225: LD_ADDR_EXP 20
1229: PUSH
1230: LD_INT 0
1232: PUSH
1233: LD_INT 0
1235: PUSH
1236: LD_INT 0
1238: PUSH
1239: LD_INT 1
1241: PUSH
1242: LD_INT 1
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_EXP 1
1256: PUSH
1257: LD_INT 1
1259: PLUS
1260: ARRAY
1261: PUSH
1262: LD_INT 0
1264: PUSH
1265: LD_INT 0
1267: PUSH
1268: LD_INT 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: LIST
1275: PUSH
1276: LD_EXP 2
1280: PUSH
1281: LD_INT 1
1283: PLUS
1284: ARRAY
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: ST_TO_ADDR
// number_of_pplants = [ [ 0 , 0 , 0 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1290: LD_ADDR_EXP 19
1294: PUSH
1295: LD_INT 0
1297: PUSH
1298: LD_INT 0
1300: PUSH
1301: LD_INT 0
1303: PUSH
1304: LD_INT 1
1306: PUSH
1307: LD_INT 2
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: LD_EXP 1
1321: PUSH
1322: LD_INT 1
1324: PLUS
1325: ARRAY
1326: PUSH
1327: LD_INT 0
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: ST_TO_ADDR
// number_of_people = [ [ 5 , 8 , 11 ] [ def_amount_of_people + 1 ] , ( [ 2 , 3 , 4 ] [ def_amount_of_people + 1 ] ) * is_depot [ 2 ] ] ;
1334: LD_ADDR_EXP 18
1338: PUSH
1339: LD_INT 5
1341: PUSH
1342: LD_INT 8
1344: PUSH
1345: LD_INT 11
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: PUSH
1353: LD_EXP 4
1357: PUSH
1358: LD_INT 1
1360: PLUS
1361: ARRAY
1362: PUSH
1363: LD_INT 2
1365: PUSH
1366: LD_INT 3
1368: PUSH
1369: LD_INT 4
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PUSH
1377: LD_EXP 4
1381: PUSH
1382: LD_INT 1
1384: PLUS
1385: ARRAY
1386: PUSH
1387: LD_EXP 17
1391: PUSH
1392: LD_INT 2
1394: ARRAY
1395: MUL
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 ] [ def_initial_level + 1 ] ;
1401: LD_ADDR_EXP 26
1405: PUSH
1406: LD_INT 2
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 4
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: LIST
1419: PUSH
1420: LD_EXP 5
1424: PUSH
1425: LD_INT 1
1427: PLUS
1428: ARRAY
1429: ST_TO_ADDR
// starting_resources = [ [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] , [ [ 50 , 0 , 0 ] , [ 20 , 0 , 0 ] ] , [ [ 150 , 30 , 0 ] , [ 60 , 0 , 0 ] ] , [ [ 250 , 50 , 10 ] , [ 100 , 30 , 0 ] ] ] [ def_starting_resources + 1 ] ;
1430: LD_ADDR_EXP 28
1434: PUSH
1435: LD_INT 0
1437: PUSH
1438: LD_INT 0
1440: PUSH
1441: LD_INT 0
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 0
1451: PUSH
1452: LD_INT 0
1454: PUSH
1455: LD_INT 0
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: LD_INT 50
1469: PUSH
1470: LD_INT 0
1472: PUSH
1473: LD_INT 0
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: LIST
1480: PUSH
1481: LD_INT 20
1483: PUSH
1484: LD_INT 0
1486: PUSH
1487: LD_INT 0
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 150
1501: PUSH
1502: LD_INT 30
1504: PUSH
1505: LD_INT 0
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: LIST
1512: PUSH
1513: LD_INT 60
1515: PUSH
1516: LD_INT 0
1518: PUSH
1519: LD_INT 0
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: LIST
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 250
1533: PUSH
1534: LD_INT 50
1536: PUSH
1537: LD_INT 10
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: LIST
1544: PUSH
1545: LD_INT 100
1547: PUSH
1548: LD_INT 30
1550: PUSH
1551: LD_INT 0
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: LIST
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_EXP 9
1573: PUSH
1574: LD_INT 1
1576: PLUS
1577: ARRAY
1578: ST_TO_ADDR
// shipments_density = [ 20 , 30 , 40 ] [ def_shipments_density + 1 ] ;
1579: LD_ADDR_EXP 29
1583: PUSH
1584: LD_INT 20
1586: PUSH
1587: LD_INT 30
1589: PUSH
1590: LD_INT 40
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: LIST
1597: PUSH
1598: LD_EXP 10
1602: PUSH
1603: LD_INT 1
1605: PLUS
1606: ARRAY
1607: ST_TO_ADDR
// max_arriving_times = [ [ ] , [ 10 , 17 , 26 , 36 , 48 , 60 ] , [ 6 , 10 , 15 , 20 , 26 , 32 , 38 , 45 , 52 , 60 ] , [ 4 , 6 , 9 , 12 , 16 , 20 , 24 , 28 , 32 , 36 , 40 , 45 , 50 , 55 , 60 ] ] [ def_people_arrivals + 1 ] ;
1608: LD_ADDR_EXP 30
1612: PUSH
1613: EMPTY
1614: PUSH
1615: LD_INT 10
1617: PUSH
1618: LD_INT 17
1620: PUSH
1621: LD_INT 26
1623: PUSH
1624: LD_INT 36
1626: PUSH
1627: LD_INT 48
1629: PUSH
1630: LD_INT 60
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 6
1643: PUSH
1644: LD_INT 10
1646: PUSH
1647: LD_INT 15
1649: PUSH
1650: LD_INT 20
1652: PUSH
1653: LD_INT 26
1655: PUSH
1656: LD_INT 32
1658: PUSH
1659: LD_INT 38
1661: PUSH
1662: LD_INT 45
1664: PUSH
1665: LD_INT 52
1667: PUSH
1668: LD_INT 60
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: PUSH
1683: LD_INT 4
1685: PUSH
1686: LD_INT 6
1688: PUSH
1689: LD_INT 9
1691: PUSH
1692: LD_INT 12
1694: PUSH
1695: LD_INT 16
1697: PUSH
1698: LD_INT 20
1700: PUSH
1701: LD_INT 24
1703: PUSH
1704: LD_INT 28
1706: PUSH
1707: LD_INT 32
1709: PUSH
1710: LD_INT 36
1712: PUSH
1713: LD_INT 40
1715: PUSH
1716: LD_INT 45
1718: PUSH
1719: LD_INT 50
1721: PUSH
1722: LD_INT 55
1724: PUSH
1725: LD_INT 60
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: PUSH
1751: LD_EXP 11
1755: PUSH
1756: LD_INT 1
1758: PLUS
1759: ARRAY
1760: ST_TO_ADDR
// text_info = [ 0 , 1 , 0 , 1 ] [ def_people_info + 1 ] ;
1761: LD_ADDR_EXP 31
1765: PUSH
1766: LD_INT 0
1768: PUSH
1769: LD_INT 1
1771: PUSH
1772: LD_INT 0
1774: PUSH
1775: LD_INT 1
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: PUSH
1784: LD_EXP 13
1788: PUSH
1789: LD_INT 1
1791: PLUS
1792: ARRAY
1793: ST_TO_ADDR
// fog_info = [ 0 , 0 , 1 , 1 ] [ def_people_info + 1 ] ;
1794: LD_ADDR_EXP 32
1798: PUSH
1799: LD_INT 0
1801: PUSH
1802: LD_INT 0
1804: PUSH
1805: LD_INT 1
1807: PUSH
1808: LD_INT 1
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: PUSH
1817: LD_EXP 13
1821: PUSH
1822: LD_INT 1
1824: PLUS
1825: ARRAY
1826: ST_TO_ADDR
// number_of_apemen = [ 0 , 6 , 12 , 18 ] [ def_amount_of_apemen + 1 ] ;
1827: LD_ADDR_EXP 34
1831: PUSH
1832: LD_INT 0
1834: PUSH
1835: LD_INT 6
1837: PUSH
1838: LD_INT 12
1840: PUSH
1841: LD_INT 18
1843: PUSH
1844: EMPTY
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: PUSH
1850: LD_EXP 16
1854: PUSH
1855: LD_INT 1
1857: PLUS
1858: ARRAY
1859: ST_TO_ADDR
// deposits = [ [ [ 1 , 0 , 1 , 2 , 0 ] [ def_main_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_main_deposits + 1 ] ] , [ [ 0 , 1 , 0 , 1 , 2 , 0 ] [ def_secondary_deposits + 1 ] , [ 0 , 0 , 1 , 1 , 0 , 2 ] [ def_secondary_deposits + 1 ] ] ] ;
1860: LD_ADDR_EXP 25
1864: PUSH
1865: LD_INT 1
1867: PUSH
1868: LD_INT 0
1870: PUSH
1871: LD_INT 1
1873: PUSH
1874: LD_INT 2
1876: PUSH
1877: LD_INT 0
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: PUSH
1887: LD_EXP 6
1891: PUSH
1892: LD_INT 1
1894: PLUS
1895: ARRAY
1896: PUSH
1897: LD_INT 0
1899: PUSH
1900: LD_INT 1
1902: PUSH
1903: LD_INT 1
1905: PUSH
1906: LD_INT 0
1908: PUSH
1909: LD_INT 2
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: PUSH
1919: LD_EXP 6
1923: PUSH
1924: LD_INT 1
1926: PLUS
1927: ARRAY
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PUSH
1933: LD_INT 0
1935: PUSH
1936: LD_INT 1
1938: PUSH
1939: LD_INT 0
1941: PUSH
1942: LD_INT 1
1944: PUSH
1945: LD_INT 2
1947: PUSH
1948: LD_INT 0
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: PUSH
1959: LD_EXP 7
1963: PUSH
1964: LD_INT 1
1966: PLUS
1967: ARRAY
1968: PUSH
1969: LD_INT 0
1971: PUSH
1972: LD_INT 0
1974: PUSH
1975: LD_INT 1
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: LD_INT 0
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: PUSH
1995: LD_EXP 7
1999: PUSH
2000: LD_INT 1
2002: PLUS
2003: ARRAY
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: ST_TO_ADDR
// def_bf_params = [ [ 0 , 0 , 0 , 0 ] , [ 50 , 25 , 0 , 50 ] , [ 75 , 50 , 25 , 75 ] , [ 100 , 75 , 50 , 100 ] ] [ def_morale_flags + 1 ] ;
2013: LD_ADDR_EXP 33
2017: PUSH
2018: LD_INT 0
2020: PUSH
2021: LD_INT 0
2023: PUSH
2024: LD_INT 0
2026: PUSH
2027: LD_INT 0
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 50
2038: PUSH
2039: LD_INT 25
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: LD_INT 50
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 75
2056: PUSH
2057: LD_INT 50
2059: PUSH
2060: LD_INT 25
2062: PUSH
2063: LD_INT 75
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 100
2074: PUSH
2075: LD_INT 75
2077: PUSH
2078: LD_INT 50
2080: PUSH
2081: LD_INT 100
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: PUSH
2096: LD_EXP 14
2100: PUSH
2101: LD_INT 1
2103: PLUS
2104: ARRAY
2105: ST_TO_ADDR
// prepare_arrivals ;
2106: CALL 10351 0 0
// if def_people_loyality then
2110: LD_EXP 12
2114: IFFALSE 2979
// begin second_side = [ [ [ 0 , 0 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 6 , 7 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 4 , 2 ] , [ 4 , 2 ] ] , [ [ 5 , 4 ] , [ 0 , 0 ] , [ 5 , 6 ] , [ 5 , 1 ] , [ 7 , 3 ] , [ 5 , 3 ] , [ 5 , 4 ] , [ 5 , 4 ] ] , [ [ 6 , 4 ] , [ 6 , 5 ] , [ 0 , 0 ] , [ 6 , 1 ] , [ 6 , 2 ] , [ 5 , 1 ] , [ 6 , 4 ] , [ 6 , 2 ] ] , [ [ 7 , 6 ] , [ 1 , 5 ] , [ 1 , 6 ] , [ 0 , 0 ] , [ 1 , 2 ] , [ 1 , 3 ] , [ 1 , 2 ] , [ 1 , 2 ] ] , [ [ 2 , 4 ] , [ 3 , 7 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 0 , 0 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 2 , 4 ] ] , [ [ 3 , 4 ] , [ 3 , 5 ] , [ 1 , 5 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 0 , 0 ] , [ 3 , 4 ] , [ 3 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 0 , 0 ] , [ 4 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 0 , 0 ] ] ] [ positions [ 1 ] ] [ positions [ 2 ] ] ;
2116: LD_ADDR_EXP 46
2120: PUSH
2121: LD_INT 0
2123: PUSH
2124: LD_INT 0
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 4
2133: PUSH
2134: LD_INT 5
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: PUSH
2141: LD_INT 4
2143: PUSH
2144: LD_INT 6
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: PUSH
2151: LD_INT 6
2153: PUSH
2154: LD_INT 7
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: PUSH
2161: LD_INT 4
2163: PUSH
2164: LD_INT 2
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: LD_INT 4
2173: PUSH
2174: LD_INT 3
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: PUSH
2181: LD_INT 4
2183: PUSH
2184: LD_INT 2
2186: PUSH
2187: EMPTY
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 4
2193: PUSH
2194: LD_INT 2
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: LIST
2205: LIST
2206: LIST
2207: LIST
2208: LIST
2209: LIST
2210: PUSH
2211: LD_INT 5
2213: PUSH
2214: LD_INT 4
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PUSH
2221: LD_INT 0
2223: PUSH
2224: LD_INT 0
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: PUSH
2231: LD_INT 5
2233: PUSH
2234: LD_INT 6
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: PUSH
2241: LD_INT 5
2243: PUSH
2244: LD_INT 1
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: PUSH
2251: LD_INT 7
2253: PUSH
2254: LD_INT 3
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 5
2263: PUSH
2264: LD_INT 3
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 5
2273: PUSH
2274: LD_INT 4
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: PUSH
2281: LD_INT 5
2283: PUSH
2284: LD_INT 4
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: LIST
2300: PUSH
2301: LD_INT 6
2303: PUSH
2304: LD_INT 4
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: PUSH
2311: LD_INT 6
2313: PUSH
2314: LD_INT 5
2316: PUSH
2317: EMPTY
2318: LIST
2319: LIST
2320: PUSH
2321: LD_INT 0
2323: PUSH
2324: LD_INT 0
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: PUSH
2331: LD_INT 6
2333: PUSH
2334: LD_INT 1
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PUSH
2341: LD_INT 6
2343: PUSH
2344: LD_INT 2
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: PUSH
2351: LD_INT 5
2353: PUSH
2354: LD_INT 1
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 6
2363: PUSH
2364: LD_INT 4
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: PUSH
2371: LD_INT 6
2373: PUSH
2374: LD_INT 2
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: PUSH
2391: LD_INT 7
2393: PUSH
2394: LD_INT 6
2396: PUSH
2397: EMPTY
2398: LIST
2399: LIST
2400: PUSH
2401: LD_INT 1
2403: PUSH
2404: LD_INT 5
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: PUSH
2411: LD_INT 1
2413: PUSH
2414: LD_INT 6
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PUSH
2421: LD_INT 0
2423: PUSH
2424: LD_INT 0
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: PUSH
2431: LD_INT 1
2433: PUSH
2434: LD_INT 2
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: PUSH
2441: LD_INT 1
2443: PUSH
2444: LD_INT 3
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 1
2453: PUSH
2454: LD_INT 2
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: PUSH
2461: LD_INT 1
2463: PUSH
2464: LD_INT 2
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: PUSH
2471: EMPTY
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: LIST
2480: PUSH
2481: LD_INT 2
2483: PUSH
2484: LD_INT 4
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: PUSH
2491: LD_INT 3
2493: PUSH
2494: LD_INT 7
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PUSH
2501: LD_INT 2
2503: PUSH
2504: LD_INT 6
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: PUSH
2511: LD_INT 2
2513: PUSH
2514: LD_INT 1
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: LD_INT 0
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: PUSH
2531: LD_INT 2
2533: PUSH
2534: LD_INT 3
2536: PUSH
2537: EMPTY
2538: LIST
2539: LIST
2540: PUSH
2541: LD_INT 2
2543: PUSH
2544: LD_INT 4
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: PUSH
2551: LD_INT 2
2553: PUSH
2554: LD_INT 4
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PUSH
2571: LD_INT 3
2573: PUSH
2574: LD_INT 4
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PUSH
2581: LD_INT 3
2583: PUSH
2584: LD_INT 5
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 1
2593: PUSH
2594: LD_INT 5
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PUSH
2601: LD_INT 3
2603: PUSH
2604: LD_INT 1
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 3
2613: PUSH
2614: LD_INT 2
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PUSH
2621: LD_INT 0
2623: PUSH
2624: LD_INT 0
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: PUSH
2631: LD_INT 3
2633: PUSH
2634: LD_INT 4
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: PUSH
2641: LD_INT 3
2643: PUSH
2644: LD_INT 2
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: LIST
2658: LIST
2659: LIST
2660: PUSH
2661: LD_INT 2
2663: PUSH
2664: LD_INT 4
2666: PUSH
2667: EMPTY
2668: LIST
2669: LIST
2670: PUSH
2671: LD_INT 4
2673: PUSH
2674: LD_INT 5
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 4
2683: PUSH
2684: LD_INT 6
2686: PUSH
2687: EMPTY
2688: LIST
2689: LIST
2690: PUSH
2691: LD_INT 2
2693: PUSH
2694: LD_INT 1
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PUSH
2701: LD_INT 4
2703: PUSH
2704: LD_INT 2
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: PUSH
2711: LD_INT 4
2713: PUSH
2714: LD_INT 3
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PUSH
2721: LD_INT 0
2723: PUSH
2724: LD_INT 0
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: PUSH
2731: LD_INT 4
2733: PUSH
2734: LD_INT 2
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: LD_INT 2
2753: PUSH
2754: LD_INT 4
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 4
2763: PUSH
2764: LD_INT 5
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 2
2773: PUSH
2774: LD_INT 6
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: LD_INT 1
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: LD_INT 4
2793: PUSH
2794: LD_INT 2
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: PUSH
2801: LD_INT 2
2803: PUSH
2804: LD_INT 3
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PUSH
2811: LD_INT 2
2813: PUSH
2814: LD_INT 4
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: PUSH
2821: LD_INT 0
2823: PUSH
2824: LD_INT 0
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: LIST
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: LIST
2845: LIST
2846: LIST
2847: LIST
2848: LIST
2849: LIST
2850: PUSH
2851: LD_EXP 37
2855: PUSH
2856: LD_INT 1
2858: ARRAY
2859: ARRAY
2860: PUSH
2861: LD_EXP 37
2865: PUSH
2866: LD_INT 2
2868: ARRAY
2869: ARRAY
2870: ST_TO_ADDR
// SetAttitude ( second_side [ 1 ] , positions [ 1 ] , att_friend , true ) ;
2871: LD_EXP 46
2875: PUSH
2876: LD_INT 1
2878: ARRAY
2879: PPUSH
2880: LD_EXP 37
2884: PUSH
2885: LD_INT 1
2887: ARRAY
2888: PPUSH
2889: LD_INT 1
2891: PPUSH
2892: LD_INT 1
2894: PPUSH
2895: CALL_OW 80
// SetAttitude ( second_side [ 2 ] , positions [ 2 ] , att_friend , true ) ;
2899: LD_EXP 46
2903: PUSH
2904: LD_INT 2
2906: ARRAY
2907: PPUSH
2908: LD_EXP 37
2912: PUSH
2913: LD_INT 2
2915: ARRAY
2916: PPUSH
2917: LD_INT 1
2919: PPUSH
2920: LD_INT 1
2922: PPUSH
2923: CALL_OW 80
// if fog_info then
2927: LD_EXP 32
2931: IFFALSE 2977
// begin ChangeSideFog ( second_side [ 1 ] , positions [ 1 ] ) ;
2933: LD_EXP 46
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: PPUSH
2942: LD_EXP 37
2946: PUSH
2947: LD_INT 1
2949: ARRAY
2950: PPUSH
2951: CALL_OW 343
// ChangeSideFog ( second_side [ 2 ] , positions [ 2 ] ) ;
2955: LD_EXP 46
2959: PUSH
2960: LD_INT 2
2962: ARRAY
2963: PPUSH
2964: LD_EXP 37
2968: PUSH
2969: LD_INT 2
2971: ARRAY
2972: PPUSH
2973: CALL_OW 343
// end ; end else
2977: GO 3259
// begin pom_tab = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] diff ( positions union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 1 ] ] union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 2 ] ] ) ;
2979: LD_ADDR_VAR 0 11
2983: PUSH
2984: LD_INT 1
2986: PUSH
2987: LD_INT 2
2989: PUSH
2990: LD_INT 3
2992: PUSH
2993: LD_INT 4
2995: PUSH
2996: LD_INT 5
2998: PUSH
2999: LD_INT 6
3001: PUSH
3002: LD_INT 7
3004: PUSH
3005: LD_INT 8
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: PUSH
3018: LD_EXP 37
3022: PUSH
3023: LD_INT 4
3025: PUSH
3026: LD_INT 5
3028: PUSH
3029: LD_INT 7
3031: PUSH
3032: LD_INT 8
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 6
3042: PUSH
3043: LD_INT 1
3045: PUSH
3046: LD_INT 7
3048: PUSH
3049: LD_INT 8
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: LIST
3056: PUSH
3057: LD_INT 2
3059: PUSH
3060: LD_INT 3
3062: PUSH
3063: LD_INT 2
3065: PUSH
3066: LD_INT 4
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PUSH
3073: LD_INT 2
3075: PUSH
3076: LD_INT 4
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: PUSH
3093: LD_EXP 37
3097: PUSH
3098: LD_INT 1
3100: ARRAY
3101: ARRAY
3102: UNION
3103: PUSH
3104: LD_INT 4
3106: PUSH
3107: LD_INT 5
3109: PUSH
3110: LD_INT 7
3112: PUSH
3113: LD_INT 8
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: LIST
3120: PUSH
3121: LD_INT 6
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: LD_INT 7
3129: PUSH
3130: LD_INT 8
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: LIST
3137: PUSH
3138: LD_INT 2
3140: PUSH
3141: LD_INT 3
3143: PUSH
3144: LD_INT 2
3146: PUSH
3147: LD_INT 4
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 2
3156: PUSH
3157: LD_INT 4
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: PUSH
3174: LD_EXP 37
3178: PUSH
3179: LD_INT 2
3181: ARRAY
3182: ARRAY
3183: UNION
3184: DIFF
3185: ST_TO_ADDR
// second_side = pom_tab [ Rand ( 1 , pom_tab ) ] ;
3186: LD_ADDR_EXP 46
3190: PUSH
3191: LD_VAR 0 11
3195: PUSH
3196: LD_INT 1
3198: PPUSH
3199: LD_VAR 0 11
3203: PPUSH
3204: CALL_OW 12
3208: ARRAY
3209: ST_TO_ADDR
// third_nation = [ 1 , 2 , 3 ] diff side_nations ;
3210: LD_ADDR_EXP 47
3214: PUSH
3215: LD_INT 1
3217: PUSH
3218: LD_INT 2
3220: PUSH
3221: LD_INT 3
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: LIST
3228: PUSH
3229: LD_EXP 43
3233: DIFF
3234: ST_TO_ADDR
// third_nation = third_nation [ Rand ( 1 , third_nation ) ] ;
3235: LD_ADDR_EXP 47
3239: PUSH
3240: LD_EXP 47
3244: PUSH
3245: LD_INT 1
3247: PPUSH
3248: LD_EXP 47
3252: PPUSH
3253: CALL_OW 12
3257: ARRAY
3258: ST_TO_ADDR
// end ; end ;
3259: LD_VAR 0 1
3263: RET
// function prepare_map_coordinates ; var side , dep2 , br2 , dep1 , br1 , lab , fac , arm , pplant , un , i , k11 , k12 , k21 , k22 ; begin
3264: LD_INT 0
3266: PPUSH
3267: PPUSH
3268: PPUSH
3269: PPUSH
3270: PPUSH
3271: PPUSH
3272: PPUSH
3273: PPUSH
3274: PPUSH
3275: PPUSH
3276: PPUSH
3277: PPUSH
3278: PPUSH
3279: PPUSH
3280: PPUSH
3281: PPUSH
// start_def = [ ] ;
3282: LD_ADDR_EXP 48
3286: PUSH
3287: EMPTY
3288: ST_TO_ADDR
// depots_def = [ ] ;
3289: LD_ADDR_EXP 49
3293: PUSH
3294: EMPTY
3295: ST_TO_ADDR
// breastworks_def = [ ] ;
3296: LD_ADDR_EXP 50
3300: PUSH
3301: EMPTY
3302: ST_TO_ADDR
// labs_def = [ ] ;
3303: LD_ADDR_EXP 51
3307: PUSH
3308: EMPTY
3309: ST_TO_ADDR
// factories_def = [ ] ;
3310: LD_ADDR_EXP 52
3314: PUSH
3315: EMPTY
3316: ST_TO_ADDR
// armories_def = [ ] ;
3317: LD_ADDR_EXP 53
3321: PUSH
3322: EMPTY
3323: ST_TO_ADDR
// pplants_def = [ ] ;
3324: LD_ADDR_EXP 54
3328: PUSH
3329: EMPTY
3330: ST_TO_ADDR
// deposits_def = [ ] ;
3331: LD_ADDR_EXP 55
3335: PUSH
3336: EMPTY
3337: ST_TO_ADDR
// k11 := Rand ( 1 , 2 ) ;
3338: LD_ADDR_VAR 0 13
3342: PUSH
3343: LD_INT 1
3345: PPUSH
3346: LD_INT 2
3348: PPUSH
3349: CALL_OW 12
3353: ST_TO_ADDR
// k12 := Rand ( 1 , 2 ) ;
3354: LD_ADDR_VAR 0 14
3358: PUSH
3359: LD_INT 1
3361: PPUSH
3362: LD_INT 2
3364: PPUSH
3365: CALL_OW 12
3369: ST_TO_ADDR
// k21 := Rand ( 1 , 2 ) ;
3370: LD_ADDR_VAR 0 15
3374: PUSH
3375: LD_INT 1
3377: PPUSH
3378: LD_INT 2
3380: PPUSH
3381: CALL_OW 12
3385: ST_TO_ADDR
// k22 := Rand ( 1 , 2 ) ;
3386: LD_ADDR_VAR 0 16
3390: PUSH
3391: LD_INT 1
3393: PPUSH
3394: LD_INT 2
3396: PPUSH
3397: CALL_OW 12
3401: ST_TO_ADDR
// deposits_def := [ [ [ [ Res111 , Res112 ] [ k11 ] , [ Res111 , Res112 ] [ 3 - k11 ] ] , [ [ Res121 , Res122 ] [ k12 ] , [ Res121 , Res122 ] [ 3 - k12 ] ] ] , [ [ [ Res211 , Res212 ] [ k21 ] , [ Res211 , Res212 ] [ 3 - k21 ] ] , [ [ Res221 , Res222 ] [ k22 ] , [ Res221 , Res222 ] [ 3 - k22 ] ] ] ] ;
3402: LD_ADDR_EXP 55
3406: PUSH
3407: LD_INT 4
3409: PUSH
3410: LD_INT 5
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PUSH
3417: LD_VAR 0 13
3421: ARRAY
3422: PUSH
3423: LD_INT 4
3425: PUSH
3426: LD_INT 5
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: PUSH
3433: LD_INT 3
3435: PUSH
3436: LD_VAR 0 13
3440: MINUS
3441: ARRAY
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: LD_INT 6
3449: PUSH
3450: LD_INT 7
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PUSH
3457: LD_VAR 0 14
3461: ARRAY
3462: PUSH
3463: LD_INT 6
3465: PUSH
3466: LD_INT 7
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 3
3475: PUSH
3476: LD_VAR 0 14
3480: MINUS
3481: ARRAY
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: PUSH
3491: LD_INT 8
3493: PUSH
3494: LD_INT 9
3496: PUSH
3497: EMPTY
3498: LIST
3499: LIST
3500: PUSH
3501: LD_VAR 0 15
3505: ARRAY
3506: PUSH
3507: LD_INT 8
3509: PUSH
3510: LD_INT 9
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PUSH
3517: LD_INT 3
3519: PUSH
3520: LD_VAR 0 15
3524: MINUS
3525: ARRAY
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: PUSH
3531: LD_INT 10
3533: PUSH
3534: LD_INT 11
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PUSH
3541: LD_VAR 0 16
3545: ARRAY
3546: PUSH
3547: LD_INT 10
3549: PUSH
3550: LD_INT 11
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PUSH
3557: LD_INT 3
3559: PUSH
3560: LD_VAR 0 16
3564: MINUS
3565: ARRAY
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: ST_TO_ADDR
// for side := 1 to 2 do
3579: LD_ADDR_VAR 0 2
3583: PUSH
3584: DOUBLE
3585: LD_INT 1
3587: DEC
3588: ST_TO_ADDR
3589: LD_INT 2
3591: PUSH
3592: FOR_TO
3593: IFFALSE 4725
// begin dep1 := side * 10 - 9 ;
3595: LD_ADDR_VAR 0 5
3599: PUSH
3600: LD_VAR 0 2
3604: PUSH
3605: LD_INT 10
3607: MUL
3608: PUSH
3609: LD_INT 9
3611: MINUS
3612: ST_TO_ADDR
// dep2 := 20 + side * 4 - 3 ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_INT 20
3620: PUSH
3621: LD_VAR 0 2
3625: PUSH
3626: LD_INT 4
3628: MUL
3629: PLUS
3630: PUSH
3631: LD_INT 3
3633: MINUS
3634: ST_TO_ADDR
// br1 := [ side * 10 - 8 , side * 10 - 7 , side * 10 - 6 , side * 10 - 5 ] ;
3635: LD_ADDR_VAR 0 6
3639: PUSH
3640: LD_VAR 0 2
3644: PUSH
3645: LD_INT 10
3647: MUL
3648: PUSH
3649: LD_INT 8
3651: MINUS
3652: PUSH
3653: LD_VAR 0 2
3657: PUSH
3658: LD_INT 10
3660: MUL
3661: PUSH
3662: LD_INT 7
3664: MINUS
3665: PUSH
3666: LD_VAR 0 2
3670: PUSH
3671: LD_INT 10
3673: MUL
3674: PUSH
3675: LD_INT 6
3677: MINUS
3678: PUSH
3679: LD_VAR 0 2
3683: PUSH
3684: LD_INT 10
3686: MUL
3687: PUSH
3688: LD_INT 5
3690: MINUS
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: ST_TO_ADDR
// br2 := [ 20 + side * 4 - 2 , 20 + side * 4 - 1 , 20 + side * 4 ] ;
3698: LD_ADDR_VAR 0 4
3702: PUSH
3703: LD_INT 20
3705: PUSH
3706: LD_VAR 0 2
3710: PUSH
3711: LD_INT 4
3713: MUL
3714: PLUS
3715: PUSH
3716: LD_INT 2
3718: MINUS
3719: PUSH
3720: LD_INT 20
3722: PUSH
3723: LD_VAR 0 2
3727: PUSH
3728: LD_INT 4
3730: MUL
3731: PLUS
3732: PUSH
3733: LD_INT 1
3735: MINUS
3736: PUSH
3737: LD_INT 20
3739: PUSH
3740: LD_VAR 0 2
3744: PUSH
3745: LD_INT 4
3747: MUL
3748: PLUS
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: LIST
3754: ST_TO_ADDR
// lab := side * 10 - 4 ;
3755: LD_ADDR_VAR 0 7
3759: PUSH
3760: LD_VAR 0 2
3764: PUSH
3765: LD_INT 10
3767: MUL
3768: PUSH
3769: LD_INT 4
3771: MINUS
3772: ST_TO_ADDR
// fac := side * 10 - 3 ;
3773: LD_ADDR_VAR 0 8
3777: PUSH
3778: LD_VAR 0 2
3782: PUSH
3783: LD_INT 10
3785: MUL
3786: PUSH
3787: LD_INT 3
3789: MINUS
3790: ST_TO_ADDR
// arm := side * 10 - 2 ;
3791: LD_ADDR_VAR 0 9
3795: PUSH
3796: LD_VAR 0 2
3800: PUSH
3801: LD_INT 10
3803: MUL
3804: PUSH
3805: LD_INT 2
3807: MINUS
3808: ST_TO_ADDR
// pplant := [ side * 10 - 1 , side * 10 ] ;
3809: LD_ADDR_VAR 0 10
3813: PUSH
3814: LD_VAR 0 2
3818: PUSH
3819: LD_INT 10
3821: MUL
3822: PUSH
3823: LD_INT 1
3825: MINUS
3826: PUSH
3827: LD_VAR 0 2
3831: PUSH
3832: LD_INT 10
3834: MUL
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: ST_TO_ADDR
// depots_def := depots_def ^ [ [ [ GetX ( dep1 ) , GetY ( dep1 ) , GetDir ( dep1 ) ] , [ GetX ( dep2 ) , GetY ( dep2 ) , GetDir ( dep2 ) ] ] ] ;
3840: LD_ADDR_EXP 49
3844: PUSH
3845: LD_EXP 49
3849: PUSH
3850: LD_VAR 0 5
3854: PPUSH
3855: CALL_OW 250
3859: PUSH
3860: LD_VAR 0 5
3864: PPUSH
3865: CALL_OW 251
3869: PUSH
3870: LD_VAR 0 5
3874: PPUSH
3875: CALL_OW 254
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: LIST
3884: PUSH
3885: LD_VAR 0 3
3889: PPUSH
3890: CALL_OW 250
3894: PUSH
3895: LD_VAR 0 3
3899: PPUSH
3900: CALL_OW 251
3904: PUSH
3905: LD_VAR 0 3
3909: PPUSH
3910: CALL_OW 254
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: LIST
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PUSH
3924: EMPTY
3925: LIST
3926: ADD
3927: ST_TO_ADDR
// start_def := start_def ^ [ [ [ ShiftX ( GetX ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) ] , [ ShiftX ( GetX ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) ] ] ] ;
3928: LD_ADDR_EXP 48
3932: PUSH
3933: LD_EXP 48
3937: PUSH
3938: LD_VAR 0 5
3942: PPUSH
3943: CALL_OW 250
3947: PPUSH
3948: LD_VAR 0 5
3952: PPUSH
3953: CALL_OW 254
3957: PUSH
3958: LD_INT 6
3960: MOD
3961: PPUSH
3962: LD_INT 6
3964: PPUSH
3965: CALL_OW 272
3969: PUSH
3970: LD_VAR 0 5
3974: PPUSH
3975: CALL_OW 251
3979: PPUSH
3980: LD_VAR 0 5
3984: PPUSH
3985: CALL_OW 254
3989: PUSH
3990: LD_INT 6
3992: MOD
3993: PPUSH
3994: LD_INT 6
3996: PPUSH
3997: CALL_OW 273
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PUSH
4006: LD_VAR 0 3
4010: PPUSH
4011: CALL_OW 250
4015: PPUSH
4016: LD_VAR 0 3
4020: PPUSH
4021: CALL_OW 254
4025: PUSH
4026: LD_INT 6
4028: MOD
4029: PPUSH
4030: LD_INT 6
4032: PPUSH
4033: CALL_OW 272
4037: PUSH
4038: LD_VAR 0 3
4042: PPUSH
4043: CALL_OW 251
4047: PPUSH
4048: LD_VAR 0 3
4052: PPUSH
4053: CALL_OW 254
4057: PUSH
4058: LD_INT 6
4060: MOD
4061: PPUSH
4062: LD_INT 6
4064: PPUSH
4065: CALL_OW 273
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PUSH
4078: EMPTY
4079: LIST
4080: ADD
4081: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ [ GetX ( br1 [ 1 ] ) , GetY ( br1 [ 1 ] ) , GetDir ( br1 [ 1 ] ) ] , [ GetX ( br1 [ 2 ] ) , GetY ( br1 [ 2 ] ) , GetDir ( br1 [ 2 ] ) ] , [ GetX ( br1 [ 3 ] ) , GetY ( br1 [ 3 ] ) , GetDir ( br1 [ 3 ] ) ] , [ GetX ( br1 [ 4 ] ) , GetY ( br1 [ 4 ] ) , GetDir ( br1 [ 4 ] ) ] ] , [ [ GetX ( br2 [ 1 ] ) , GetY ( br2 [ 1 ] ) , GetDir ( br2 [ 1 ] ) ] , [ GetX ( br2 [ 2 ] ) , GetY ( br2 [ 2 ] ) , GetDir ( br2 [ 2 ] ) ] , [ GetX ( br2 [ 3 ] ) , GetY ( br2 [ 3 ] ) , GetDir ( br2 [ 3 ] ) ] ] ] ] ;
4082: LD_ADDR_EXP 50
4086: PUSH
4087: LD_EXP 50
4091: PUSH
4092: LD_VAR 0 6
4096: PUSH
4097: LD_INT 1
4099: ARRAY
4100: PPUSH
4101: CALL_OW 250
4105: PUSH
4106: LD_VAR 0 6
4110: PUSH
4111: LD_INT 1
4113: ARRAY
4114: PPUSH
4115: CALL_OW 251
4119: PUSH
4120: LD_VAR 0 6
4124: PUSH
4125: LD_INT 1
4127: ARRAY
4128: PPUSH
4129: CALL_OW 254
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: LIST
4138: PUSH
4139: LD_VAR 0 6
4143: PUSH
4144: LD_INT 2
4146: ARRAY
4147: PPUSH
4148: CALL_OW 250
4152: PUSH
4153: LD_VAR 0 6
4157: PUSH
4158: LD_INT 2
4160: ARRAY
4161: PPUSH
4162: CALL_OW 251
4166: PUSH
4167: LD_VAR 0 6
4171: PUSH
4172: LD_INT 2
4174: ARRAY
4175: PPUSH
4176: CALL_OW 254
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: LIST
4185: PUSH
4186: LD_VAR 0 6
4190: PUSH
4191: LD_INT 3
4193: ARRAY
4194: PPUSH
4195: CALL_OW 250
4199: PUSH
4200: LD_VAR 0 6
4204: PUSH
4205: LD_INT 3
4207: ARRAY
4208: PPUSH
4209: CALL_OW 251
4213: PUSH
4214: LD_VAR 0 6
4218: PUSH
4219: LD_INT 3
4221: ARRAY
4222: PPUSH
4223: CALL_OW 254
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: LIST
4232: PUSH
4233: LD_VAR 0 6
4237: PUSH
4238: LD_INT 4
4240: ARRAY
4241: PPUSH
4242: CALL_OW 250
4246: PUSH
4247: LD_VAR 0 6
4251: PUSH
4252: LD_INT 4
4254: ARRAY
4255: PPUSH
4256: CALL_OW 251
4260: PUSH
4261: LD_VAR 0 6
4265: PUSH
4266: LD_INT 4
4268: ARRAY
4269: PPUSH
4270: CALL_OW 254
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: LIST
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: PUSH
4286: LD_VAR 0 4
4290: PUSH
4291: LD_INT 1
4293: ARRAY
4294: PPUSH
4295: CALL_OW 250
4299: PUSH
4300: LD_VAR 0 4
4304: PUSH
4305: LD_INT 1
4307: ARRAY
4308: PPUSH
4309: CALL_OW 251
4313: PUSH
4314: LD_VAR 0 4
4318: PUSH
4319: LD_INT 1
4321: ARRAY
4322: PPUSH
4323: CALL_OW 254
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: LIST
4332: PUSH
4333: LD_VAR 0 4
4337: PUSH
4338: LD_INT 2
4340: ARRAY
4341: PPUSH
4342: CALL_OW 250
4346: PUSH
4347: LD_VAR 0 4
4351: PUSH
4352: LD_INT 2
4354: ARRAY
4355: PPUSH
4356: CALL_OW 251
4360: PUSH
4361: LD_VAR 0 4
4365: PUSH
4366: LD_INT 2
4368: ARRAY
4369: PPUSH
4370: CALL_OW 254
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: LIST
4379: PUSH
4380: LD_VAR 0 4
4384: PUSH
4385: LD_INT 3
4387: ARRAY
4388: PPUSH
4389: CALL_OW 250
4393: PUSH
4394: LD_VAR 0 4
4398: PUSH
4399: LD_INT 3
4401: ARRAY
4402: PPUSH
4403: CALL_OW 251
4407: PUSH
4408: LD_VAR 0 4
4412: PUSH
4413: LD_INT 3
4415: ARRAY
4416: PPUSH
4417: CALL_OW 254
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: LIST
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: EMPTY
4437: LIST
4438: ADD
4439: ST_TO_ADDR
// labs_def := labs_def ^ [ [ [ GetX ( lab ) , GetY ( lab ) , GetDir ( lab ) ] , [ ] ] ] ;
4440: LD_ADDR_EXP 51
4444: PUSH
4445: LD_EXP 51
4449: PUSH
4450: LD_VAR 0 7
4454: PPUSH
4455: CALL_OW 250
4459: PUSH
4460: LD_VAR 0 7
4464: PPUSH
4465: CALL_OW 251
4469: PUSH
4470: LD_VAR 0 7
4474: PPUSH
4475: CALL_OW 254
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: LIST
4484: PUSH
4485: EMPTY
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PUSH
4491: EMPTY
4492: LIST
4493: ADD
4494: ST_TO_ADDR
// factories_def := factories_def ^ [ [ [ GetX ( fac ) , GetY ( fac ) , GetDir ( fac ) ] , [ ] ] ] ;
4495: LD_ADDR_EXP 52
4499: PUSH
4500: LD_EXP 52
4504: PUSH
4505: LD_VAR 0 8
4509: PPUSH
4510: CALL_OW 250
4514: PUSH
4515: LD_VAR 0 8
4519: PPUSH
4520: CALL_OW 251
4524: PUSH
4525: LD_VAR 0 8
4529: PPUSH
4530: CALL_OW 254
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: PUSH
4540: EMPTY
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: PUSH
4546: EMPTY
4547: LIST
4548: ADD
4549: ST_TO_ADDR
// armories_def := armories_def ^ [ [ [ GetX ( arm ) , GetY ( arm ) , GetDir ( arm ) ] , [ ] ] ] ;
4550: LD_ADDR_EXP 53
4554: PUSH
4555: LD_EXP 53
4559: PUSH
4560: LD_VAR 0 9
4564: PPUSH
4565: CALL_OW 250
4569: PUSH
4570: LD_VAR 0 9
4574: PPUSH
4575: CALL_OW 251
4579: PUSH
4580: LD_VAR 0 9
4584: PPUSH
4585: CALL_OW 254
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: PUSH
4595: EMPTY
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: EMPTY
4602: LIST
4603: ADD
4604: ST_TO_ADDR
// pplants_def := pplants_def ^ [ [ [ [ GetX ( pplant [ 1 ] ) , GetY ( pplant [ 1 ] ) , GetDir ( pplant [ 1 ] ) ] , [ GetX ( pplant [ 2 ] ) , GetY ( pplant [ 2 ] ) , GetDir ( pplant [ 2 ] ) ] ] , [ ] ] ] ;
4605: LD_ADDR_EXP 54
4609: PUSH
4610: LD_EXP 54
4614: PUSH
4615: LD_VAR 0 10
4619: PUSH
4620: LD_INT 1
4622: ARRAY
4623: PPUSH
4624: CALL_OW 250
4628: PUSH
4629: LD_VAR 0 10
4633: PUSH
4634: LD_INT 1
4636: ARRAY
4637: PPUSH
4638: CALL_OW 251
4642: PUSH
4643: LD_VAR 0 10
4647: PUSH
4648: LD_INT 1
4650: ARRAY
4651: PPUSH
4652: CALL_OW 254
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: LIST
4661: PUSH
4662: LD_VAR 0 10
4666: PUSH
4667: LD_INT 2
4669: ARRAY
4670: PPUSH
4671: CALL_OW 250
4675: PUSH
4676: LD_VAR 0 10
4680: PUSH
4681: LD_INT 2
4683: ARRAY
4684: PPUSH
4685: CALL_OW 251
4689: PUSH
4690: LD_VAR 0 10
4694: PUSH
4695: LD_INT 2
4697: ARRAY
4698: PPUSH
4699: CALL_OW 254
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: PUSH
4713: EMPTY
4714: PUSH
4715: EMPTY
4716: LIST
4717: LIST
4718: PUSH
4719: EMPTY
4720: LIST
4721: ADD
4722: ST_TO_ADDR
// end ;
4723: GO 3592
4725: POP
4726: POP
// for un := 1 to 28 do
4727: LD_ADDR_VAR 0 11
4731: PUSH
4732: DOUBLE
4733: LD_INT 1
4735: DEC
4736: ST_TO_ADDR
4737: LD_INT 28
4739: PUSH
4740: FOR_TO
4741: IFFALSE 4754
// DestroyUnit ( un ) ;
4743: LD_VAR 0 11
4747: PPUSH
4748: CALL_OW 65
4752: GO 4740
4754: POP
4755: POP
// end ;
4756: LD_VAR 0 1
4760: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
4761: LD_INT 0
4763: PPUSH
4764: PPUSH
4765: PPUSH
// for i := 1 to 8 do
4766: LD_ADDR_VAR 0 2
4770: PUSH
4771: DOUBLE
4772: LD_INT 1
4774: DEC
4775: ST_TO_ADDR
4776: LD_INT 8
4778: PUSH
4779: FOR_TO
4780: IFFALSE 4870
// for j := 1 to 8 do
4782: LD_ADDR_VAR 0 3
4786: PUSH
4787: DOUBLE
4788: LD_INT 1
4790: DEC
4791: ST_TO_ADDR
4792: LD_INT 8
4794: PUSH
4795: FOR_TO
4796: IFFALSE 4866
// if Side_Teams [ i ] = Side_Teams [ j ] then
4798: LD_EXP 40
4802: PUSH
4803: LD_VAR 0 2
4807: ARRAY
4808: PUSH
4809: LD_EXP 40
4813: PUSH
4814: LD_VAR 0 3
4818: ARRAY
4819: EQUAL
4820: IFFALSE 4844
// SetAttitude ( i , j , att_friend , true ) else
4822: LD_VAR 0 2
4826: PPUSH
4827: LD_VAR 0 3
4831: PPUSH
4832: LD_INT 1
4834: PPUSH
4835: LD_INT 1
4837: PPUSH
4838: CALL_OW 80
4842: GO 4864
// SetAttitude ( i , j , att_enemy , true ) ;
4844: LD_VAR 0 2
4848: PPUSH
4849: LD_VAR 0 3
4853: PPUSH
4854: LD_INT 2
4856: PPUSH
4857: LD_INT 1
4859: PPUSH
4860: CALL_OW 80
4864: GO 4795
4866: POP
4867: POP
4868: GO 4779
4870: POP
4871: POP
// end ;
4872: LD_VAR 0 1
4876: RET
// function prepare_people ( count , cl , x , y , r , var commander ) ; var i , j , un ; begin
4877: LD_INT 0
4879: PPUSH
4880: PPUSH
4881: PPUSH
4882: PPUSH
// result := [ ] ;
4883: LD_ADDR_VAR 0 7
4887: PUSH
4888: EMPTY
4889: ST_TO_ADDR
// for i := 1 to count do
4890: LD_ADDR_VAR 0 8
4894: PUSH
4895: DOUBLE
4896: LD_INT 1
4898: DEC
4899: ST_TO_ADDR
4900: LD_VAR 0 1
4904: PUSH
4905: FOR_TO
4906: IFFALSE 5210
// begin uc_direction := Rand ( 0 , 5 ) ;
4908: LD_ADDR_OWVAR 24
4912: PUSH
4913: LD_INT 0
4915: PPUSH
4916: LD_INT 5
4918: PPUSH
4919: CALL_OW 12
4923: ST_TO_ADDR
// if commander then
4924: LD_FROM_VAR 0 6
4928: IFFALSE 4977
// begin PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
4930: LD_INT 1
4932: PPUSH
4933: LD_INT 2
4935: PPUSH
4936: CALL_OW 12
4940: PPUSH
4941: LD_VAR 0 2
4945: PPUSH
4946: LD_EXP 26
4950: PUSH
4951: LD_INT 2
4953: PLUS
4954: PPUSH
4955: CALL_OW 380
// hc_importance := 105 ;
4959: LD_ADDR_OWVAR 32
4963: PUSH
4964: LD_INT 105
4966: ST_TO_ADDR
// commander := false ;
4967: LD_VAR 0 6
4971: PUSH
4972: LD_INT 0
4974: ST_TO_ADDR
// end else
4975: GO 5010
// begin PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
4977: LD_INT 1
4979: PPUSH
4980: LD_INT 2
4982: PPUSH
4983: CALL_OW 12
4987: PPUSH
4988: LD_VAR 0 2
4992: PPUSH
4993: LD_EXP 26
4997: PPUSH
4998: CALL_OW 380
// hc_importance := 0 ;
5002: LD_ADDR_OWVAR 32
5006: PUSH
5007: LD_INT 0
5009: ST_TO_ADDR
// end ; un := CreateHuman ;
5010: LD_ADDR_VAR 0 10
5014: PUSH
5015: CALL_OW 44
5019: ST_TO_ADDR
// if global_defined then
5020: LD_LOC 2
5024: IFFALSE 5162
// begin j := i ;
5026: LD_ADDR_VAR 0 9
5030: PUSH
5031: LD_VAR 0 8
5035: ST_TO_ADDR
// if cl = class_soldier then
5036: LD_VAR 0 2
5040: PUSH
5041: LD_INT 1
5043: EQUAL
5044: IFFALSE 5062
// j := i + soldiers_created ;
5046: LD_ADDR_VAR 0 9
5050: PUSH
5051: LD_VAR 0 8
5055: PUSH
5056: LD_LOC 3
5060: PLUS
5061: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
5062: LD_LOC 1
5066: PUSH
5067: LD_VAR 0 2
5071: ARRAY
5072: PUSH
5073: LD_VAR 0 9
5077: ARRAY
5078: PPUSH
5079: LD_VAR 0 10
5083: PPUSH
5084: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
5088: LD_VAR 0 10
5092: PPUSH
5093: LD_INT 2
5095: PPUSH
5096: LD_LOC 1
5100: PUSH
5101: LD_VAR 0 2
5105: ARRAY
5106: PUSH
5107: LD_VAR 0 9
5111: ARRAY
5112: PPUSH
5113: LD_INT 2
5115: PPUSH
5116: CALL_OW 260
5120: PPUSH
5121: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
5125: LD_VAR 0 10
5129: PPUSH
5130: LD_INT 1
5132: PPUSH
5133: LD_LOC 1
5137: PUSH
5138: LD_VAR 0 2
5142: ARRAY
5143: PUSH
5144: LD_VAR 0 9
5148: ARRAY
5149: PPUSH
5150: LD_INT 1
5152: PPUSH
5153: CALL_OW 260
5157: PPUSH
5158: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
5162: LD_VAR 0 10
5166: PPUSH
5167: LD_VAR 0 3
5171: PPUSH
5172: LD_VAR 0 4
5176: PPUSH
5177: LD_VAR 0 5
5181: PPUSH
5182: LD_INT 0
5184: PPUSH
5185: CALL_OW 50
// result := result ^ [ un ] ;
5189: LD_ADDR_VAR 0 7
5193: PUSH
5194: LD_VAR 0 7
5198: PUSH
5199: LD_VAR 0 10
5203: PUSH
5204: EMPTY
5205: LIST
5206: ADD
5207: ST_TO_ADDR
// end ;
5208: GO 4905
5210: POP
5211: POP
// if not global_defined then
5212: LD_LOC 2
5216: NOT
5217: IFFALSE 5279
// if cl = class_soldier and global_units then
5219: LD_VAR 0 2
5223: PUSH
5224: LD_INT 1
5226: EQUAL
5227: PUSH
5228: LD_LOC 1
5232: AND
5233: IFFALSE 5260
// global_units := [ global_units [ 1 ] ^ result ] else
5235: LD_ADDR_LOC 1
5239: PUSH
5240: LD_LOC 1
5244: PUSH
5245: LD_INT 1
5247: ARRAY
5248: PUSH
5249: LD_VAR 0 7
5253: ADD
5254: PUSH
5255: EMPTY
5256: LIST
5257: ST_TO_ADDR
5258: GO 5279
// global_units := global_units ^ [ result ] end ;
5260: LD_ADDR_LOC 1
5264: PUSH
5265: LD_LOC 1
5269: PUSH
5270: LD_VAR 0 7
5274: PUSH
5275: EMPTY
5276: LIST
5277: ADD
5278: ST_TO_ADDR
5279: LD_VAR 0 7
5283: RET
// function prepare_side_base ( side , base ) ; var pos , x , y , i , r , un , sol , br , dep , lab , fact , arm , p , neng , nsci , nmech , nsol , def , coord , max ; begin
5284: LD_INT 0
5286: PPUSH
5287: PPUSH
5288: PPUSH
5289: PPUSH
5290: PPUSH
5291: PPUSH
5292: PPUSH
5293: PPUSH
5294: PPUSH
5295: PPUSH
5296: PPUSH
5297: PPUSH
5298: PPUSH
5299: PPUSH
5300: PPUSH
5301: PPUSH
5302: PPUSH
5303: PPUSH
5304: PPUSH
5305: PPUSH
5306: PPUSH
// pos := Side_Positions [ side ] ;
5307: LD_ADDR_VAR 0 4
5311: PUSH
5312: LD_EXP 42
5316: PUSH
5317: LD_VAR 0 1
5321: ARRAY
5322: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
5323: LD_ADDR_OWVAR 21
5327: PUSH
5328: LD_EXP 43
5332: PUSH
5333: LD_VAR 0 1
5337: ARRAY
5338: ST_TO_ADDR
// uc_side := side ;
5339: LD_ADDR_OWVAR 20
5343: PUSH
5344: LD_VAR 0 1
5348: ST_TO_ADDR
// x := depots_def [ pos ] [ base ] [ 1 ] ;
5349: LD_ADDR_VAR 0 5
5353: PUSH
5354: LD_EXP 49
5358: PUSH
5359: LD_VAR 0 4
5363: ARRAY
5364: PUSH
5365: LD_VAR 0 2
5369: ARRAY
5370: PUSH
5371: LD_INT 1
5373: ARRAY
5374: ST_TO_ADDR
// y := depots_def [ pos ] [ base ] [ 2 ] ;
5375: LD_ADDR_VAR 0 6
5379: PUSH
5380: LD_EXP 49
5384: PUSH
5385: LD_VAR 0 4
5389: ARRAY
5390: PUSH
5391: LD_VAR 0 2
5395: ARRAY
5396: PUSH
5397: LD_INT 2
5399: ARRAY
5400: ST_TO_ADDR
// if is_depot [ base ] then
5401: LD_EXP 17
5405: PUSH
5406: LD_VAR 0 2
5410: ARRAY
5411: IFFALSE 5586
// begin if is_depot [ base ] = 1 then
5413: LD_EXP 17
5417: PUSH
5418: LD_VAR 0 2
5422: ARRAY
5423: PUSH
5424: LD_INT 1
5426: EQUAL
5427: IFFALSE 5439
// bc_type = b_depot else
5429: LD_ADDR_OWVAR 42
5433: PUSH
5434: LD_INT 0
5436: ST_TO_ADDR
5437: GO 5447
// bc_type = b_warehouse ;
5439: LD_ADDR_OWVAR 42
5443: PUSH
5444: LD_INT 1
5446: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , depots_def [ pos ] [ base ] [ 3 ] ) ;
5447: LD_ADDR_VAR 0 12
5451: PUSH
5452: LD_VAR 0 5
5456: PPUSH
5457: LD_VAR 0 6
5461: PPUSH
5462: LD_EXP 49
5466: PUSH
5467: LD_VAR 0 4
5471: ARRAY
5472: PUSH
5473: LD_VAR 0 2
5477: ARRAY
5478: PUSH
5479: LD_INT 3
5481: ARRAY
5482: PPUSH
5483: CALL_OW 47
5487: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ base ] [ mat_cans ] ) ;
5488: LD_VAR 0 12
5492: PPUSH
5493: CALL_OW 274
5497: PPUSH
5498: LD_INT 1
5500: PPUSH
5501: LD_EXP 28
5505: PUSH
5506: LD_VAR 0 2
5510: ARRAY
5511: PUSH
5512: LD_INT 1
5514: ARRAY
5515: PPUSH
5516: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ base ] [ mat_oil ] ) ;
5520: LD_VAR 0 12
5524: PPUSH
5525: CALL_OW 274
5529: PPUSH
5530: LD_INT 2
5532: PPUSH
5533: LD_EXP 28
5537: PUSH
5538: LD_VAR 0 2
5542: ARRAY
5543: PUSH
5544: LD_INT 2
5546: ARRAY
5547: PPUSH
5548: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ base ] [ mat_siberit ] ) ;
5552: LD_VAR 0 3
5556: PPUSH
5557: CALL_OW 274
5561: PPUSH
5562: LD_INT 3
5564: PPUSH
5565: LD_EXP 28
5569: PUSH
5570: LD_VAR 0 2
5574: ARRAY
5575: PUSH
5576: LD_INT 3
5578: ARRAY
5579: PPUSH
5580: CALL_OW 277
// end else
5584: GO 5736
// begin for i := 1 to 3 do
5586: LD_ADDR_VAR 0 7
5590: PUSH
5591: DOUBLE
5592: LD_INT 1
5594: DEC
5595: ST_TO_ADDR
5596: LD_INT 3
5598: PUSH
5599: FOR_TO
5600: IFFALSE 5734
// begin r := starting_resources [ base ] [ i ] ;
5602: LD_ADDR_VAR 0 8
5606: PUSH
5607: LD_EXP 28
5611: PUSH
5612: LD_VAR 0 2
5616: ARRAY
5617: PUSH
5618: LD_VAR 0 7
5622: ARRAY
5623: ST_TO_ADDR
// while r >= 10 do
5624: LD_VAR 0 8
5628: PUSH
5629: LD_INT 10
5631: GREATEREQUAL
5632: IFFALSE 5732
// if r > 50 then
5634: LD_VAR 0 8
5638: PUSH
5639: LD_INT 50
5641: GREATER
5642: IFFALSE 5688
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
5644: LD_VAR 0 7
5648: PPUSH
5649: LD_INT 5
5651: PPUSH
5652: LD_VAR 0 5
5656: PPUSH
5657: LD_VAR 0 6
5661: PPUSH
5662: LD_INT 4
5664: PPUSH
5665: LD_INT 0
5667: PPUSH
5668: CALL_OW 60
// r := r - 50 ;
5672: LD_ADDR_VAR 0 8
5676: PUSH
5677: LD_VAR 0 8
5681: PUSH
5682: LD_INT 50
5684: MINUS
5685: ST_TO_ADDR
// end else
5686: GO 5730
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
5688: LD_VAR 0 7
5692: PPUSH
5693: LD_VAR 0 8
5697: PUSH
5698: LD_INT 10
5700: DIV
5701: PPUSH
5702: LD_VAR 0 5
5706: PPUSH
5707: LD_VAR 0 6
5711: PPUSH
5712: LD_INT 4
5714: PPUSH
5715: LD_INT 0
5717: PPUSH
5718: CALL_OW 60
// r := 0 ;
5722: LD_ADDR_VAR 0 8
5726: PUSH
5727: LD_INT 0
5729: ST_TO_ADDR
// end ;
5730: GO 5624
// end ;
5732: GO 5599
5734: POP
5735: POP
// end ; if is_lab [ base ] then
5736: LD_EXP 21
5740: PUSH
5741: LD_VAR 0 2
5745: ARRAY
5746: IFFALSE 5887
// begin if is_lab [ base ] = 1 then
5748: LD_EXP 21
5752: PUSH
5753: LD_VAR 0 2
5757: ARRAY
5758: PUSH
5759: LD_INT 1
5761: EQUAL
5762: IFFALSE 5790
// begin bc_type = b_lab ;
5764: LD_ADDR_OWVAR 42
5768: PUSH
5769: LD_INT 6
5771: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
5772: LD_ADDR_OWVAR 44
5776: PUSH
5777: LD_INT 9
5779: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
5780: LD_ADDR_OWVAR 45
5784: PUSH
5785: LD_INT 9
5787: ST_TO_ADDR
// end else
5788: GO 5814
// begin bc_type = b_lab_full ;
5790: LD_ADDR_OWVAR 42
5794: PUSH
5795: LD_INT 8
5797: ST_TO_ADDR
// bc_kind1 = b_lab_siberium ;
5798: LD_ADDR_OWVAR 44
5802: PUSH
5803: LD_INT 11
5805: ST_TO_ADDR
// bc_kind2 = b_lab_weapon ;
5806: LD_ADDR_OWVAR 45
5810: PUSH
5811: LD_INT 10
5813: ST_TO_ADDR
// end ; lab := CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ base ] [ 1 ] , labs_def [ pos ] [ base ] [ 2 ] , labs_def [ pos ] [ base ] [ 3 ] ) ;
5814: LD_ADDR_VAR 0 13
5818: PUSH
5819: LD_EXP 51
5823: PUSH
5824: LD_VAR 0 4
5828: ARRAY
5829: PUSH
5830: LD_VAR 0 2
5834: ARRAY
5835: PUSH
5836: LD_INT 1
5838: ARRAY
5839: PPUSH
5840: LD_EXP 51
5844: PUSH
5845: LD_VAR 0 4
5849: ARRAY
5850: PUSH
5851: LD_VAR 0 2
5855: ARRAY
5856: PUSH
5857: LD_INT 2
5859: ARRAY
5860: PPUSH
5861: LD_EXP 51
5865: PUSH
5866: LD_VAR 0 4
5870: ARRAY
5871: PUSH
5872: LD_VAR 0 2
5876: ARRAY
5877: PUSH
5878: LD_INT 3
5880: ARRAY
5881: PPUSH
5882: CALL_OW 47
5886: ST_TO_ADDR
// end ; if is_fact [ base ] then
5887: LD_EXP 22
5891: PUSH
5892: LD_VAR 0 2
5896: ARRAY
5897: IFFALSE 6006
// begin if is_fact [ base ] = 1 then
5899: LD_EXP 22
5903: PUSH
5904: LD_VAR 0 2
5908: ARRAY
5909: PUSH
5910: LD_INT 1
5912: EQUAL
5913: IFFALSE 5925
// bc_type = b_workshop else
5915: LD_ADDR_OWVAR 42
5919: PUSH
5920: LD_INT 2
5922: ST_TO_ADDR
5923: GO 5933
// bc_type = b_factory ;
5925: LD_ADDR_OWVAR 42
5929: PUSH
5930: LD_INT 3
5932: ST_TO_ADDR
// fact := CreateAndPlaceBuildingXYD ( factories_def [ pos ] [ base ] [ 1 ] , factories_def [ pos ] [ base ] [ 2 ] , factories_def [ pos ] [ base ] [ 3 ] ) ;
5933: LD_ADDR_VAR 0 14
5937: PUSH
5938: LD_EXP 52
5942: PUSH
5943: LD_VAR 0 4
5947: ARRAY
5948: PUSH
5949: LD_VAR 0 2
5953: ARRAY
5954: PUSH
5955: LD_INT 1
5957: ARRAY
5958: PPUSH
5959: LD_EXP 52
5963: PUSH
5964: LD_VAR 0 4
5968: ARRAY
5969: PUSH
5970: LD_VAR 0 2
5974: ARRAY
5975: PUSH
5976: LD_INT 2
5978: ARRAY
5979: PPUSH
5980: LD_EXP 52
5984: PUSH
5985: LD_VAR 0 4
5989: ARRAY
5990: PUSH
5991: LD_VAR 0 2
5995: ARRAY
5996: PUSH
5997: LD_INT 3
5999: ARRAY
6000: PPUSH
6001: CALL_OW 47
6005: ST_TO_ADDR
// end ; if is_arm [ base ] then
6006: LD_EXP 23
6010: PUSH
6011: LD_VAR 0 2
6015: ARRAY
6016: IFFALSE 6125
// begin if is_arm [ base ] = 1 then
6018: LD_EXP 23
6022: PUSH
6023: LD_VAR 0 2
6027: ARRAY
6028: PUSH
6029: LD_INT 1
6031: EQUAL
6032: IFFALSE 6044
// bc_type = b_armoury else
6034: LD_ADDR_OWVAR 42
6038: PUSH
6039: LD_INT 4
6041: ST_TO_ADDR
6042: GO 6052
// bc_type = b_barracks ;
6044: LD_ADDR_OWVAR 42
6048: PUSH
6049: LD_INT 5
6051: ST_TO_ADDR
// arm := CreateAndPlaceBuildingXYD ( armories_def [ pos ] [ base ] [ 1 ] , armories_def [ pos ] [ base ] [ 2 ] , armories_def [ pos ] [ base ] [ 3 ] ) ;
6052: LD_ADDR_VAR 0 15
6056: PUSH
6057: LD_EXP 53
6061: PUSH
6062: LD_VAR 0 4
6066: ARRAY
6067: PUSH
6068: LD_VAR 0 2
6072: ARRAY
6073: PUSH
6074: LD_INT 1
6076: ARRAY
6077: PPUSH
6078: LD_EXP 53
6082: PUSH
6083: LD_VAR 0 4
6087: ARRAY
6088: PUSH
6089: LD_VAR 0 2
6093: ARRAY
6094: PUSH
6095: LD_INT 2
6097: ARRAY
6098: PPUSH
6099: LD_EXP 53
6103: PUSH
6104: LD_VAR 0 4
6108: ARRAY
6109: PUSH
6110: LD_VAR 0 2
6114: ARRAY
6115: PUSH
6116: LD_INT 3
6118: ARRAY
6119: PPUSH
6120: CALL_OW 47
6124: ST_TO_ADDR
// end ; for i := 1 to number_of_pplants [ base ] do
6125: LD_ADDR_VAR 0 7
6129: PUSH
6130: DOUBLE
6131: LD_INT 1
6133: DEC
6134: ST_TO_ADDR
6135: LD_EXP 19
6139: PUSH
6140: LD_VAR 0 2
6144: ARRAY
6145: PUSH
6146: FOR_TO
6147: IFFALSE 6244
// begin bc_type = b_oil_power ;
6149: LD_ADDR_OWVAR 42
6153: PUSH
6154: LD_INT 26
6156: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( pplants_def [ pos ] [ base ] [ i ] [ 1 ] , pplants_def [ pos ] [ base ] [ i ] [ 2 ] , pplants_def [ pos ] [ base ] [ i ] [ 3 ] ) ;
6157: LD_EXP 54
6161: PUSH
6162: LD_VAR 0 4
6166: ARRAY
6167: PUSH
6168: LD_VAR 0 2
6172: ARRAY
6173: PUSH
6174: LD_VAR 0 7
6178: ARRAY
6179: PUSH
6180: LD_INT 1
6182: ARRAY
6183: PPUSH
6184: LD_EXP 54
6188: PUSH
6189: LD_VAR 0 4
6193: ARRAY
6194: PUSH
6195: LD_VAR 0 2
6199: ARRAY
6200: PUSH
6201: LD_VAR 0 7
6205: ARRAY
6206: PUSH
6207: LD_INT 2
6209: ARRAY
6210: PPUSH
6211: LD_EXP 54
6215: PUSH
6216: LD_VAR 0 4
6220: ARRAY
6221: PUSH
6222: LD_VAR 0 2
6226: ARRAY
6227: PUSH
6228: LD_VAR 0 7
6232: ARRAY
6233: PUSH
6234: LD_INT 3
6236: ARRAY
6237: PPUSH
6238: CALL_OW 47
// end ;
6242: GO 6146
6244: POP
6245: POP
// for i := 1 to deposits [ base ] [ 1 ] do
6246: LD_ADDR_VAR 0 7
6250: PUSH
6251: DOUBLE
6252: LD_INT 1
6254: DEC
6255: ST_TO_ADDR
6256: LD_EXP 25
6260: PUSH
6261: LD_VAR 0 2
6265: ARRAY
6266: PUSH
6267: LD_INT 1
6269: ARRAY
6270: PUSH
6271: FOR_TO
6272: IFFALSE 6382
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i ] , false ) ;
6274: LD_ADDR_VAR 0 22
6278: PUSH
6279: LD_EXP 55
6283: PUSH
6284: LD_VAR 0 4
6288: ARRAY
6289: PUSH
6290: LD_VAR 0 2
6294: ARRAY
6295: PUSH
6296: LD_VAR 0 7
6300: ARRAY
6301: PPUSH
6302: LD_INT 0
6304: PPUSH
6305: CALL_OW 16
6309: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_oil ) ;
6310: LD_VAR 0 22
6314: PUSH
6315: LD_INT 1
6317: ARRAY
6318: PPUSH
6319: LD_VAR 0 22
6323: PUSH
6324: LD_INT 2
6326: ARRAY
6327: PPUSH
6328: LD_INT 2
6330: PPUSH
6331: CALL_OW 62
// if are_mines [ base ] then
6335: LD_EXP 20
6339: PUSH
6340: LD_VAR 0 2
6344: ARRAY
6345: IFFALSE 6380
// begin bc_type = b_oil_mine ;
6347: LD_ADDR_OWVAR 42
6351: PUSH
6352: LD_INT 29
6354: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
6355: LD_VAR 0 22
6359: PUSH
6360: LD_INT 1
6362: ARRAY
6363: PPUSH
6364: LD_VAR 0 22
6368: PUSH
6369: LD_INT 2
6371: ARRAY
6372: PPUSH
6373: LD_INT 0
6375: PPUSH
6376: CALL_OW 47
// end ; end ;
6380: GO 6271
6382: POP
6383: POP
// for i := 1 to deposits [ base ] [ 2 ] do
6384: LD_ADDR_VAR 0 7
6388: PUSH
6389: DOUBLE
6390: LD_INT 1
6392: DEC
6393: ST_TO_ADDR
6394: LD_EXP 25
6398: PUSH
6399: LD_VAR 0 2
6403: ARRAY
6404: PUSH
6405: LD_INT 2
6407: ARRAY
6408: PUSH
6409: FOR_TO
6410: IFFALSE 6542
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i + deposits [ base ] [ 1 ] ] , false ) ;
6412: LD_ADDR_VAR 0 22
6416: PUSH
6417: LD_EXP 55
6421: PUSH
6422: LD_VAR 0 4
6426: ARRAY
6427: PUSH
6428: LD_VAR 0 2
6432: ARRAY
6433: PUSH
6434: LD_VAR 0 7
6438: PUSH
6439: LD_EXP 25
6443: PUSH
6444: LD_VAR 0 2
6448: ARRAY
6449: PUSH
6450: LD_INT 1
6452: ARRAY
6453: PLUS
6454: ARRAY
6455: PPUSH
6456: LD_INT 0
6458: PPUSH
6459: CALL_OW 16
6463: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_siberit ) ;
6464: LD_VAR 0 22
6468: PUSH
6469: LD_INT 1
6471: ARRAY
6472: PPUSH
6473: LD_VAR 0 22
6477: PUSH
6478: LD_INT 2
6480: ARRAY
6481: PPUSH
6482: LD_INT 3
6484: PPUSH
6485: CALL_OW 62
// if are_mines [ base ] and def_siberite_detection then
6489: LD_EXP 20
6493: PUSH
6494: LD_VAR 0 2
6498: ARRAY
6499: PUSH
6500: LD_EXP 8
6504: AND
6505: IFFALSE 6540
// begin bc_type = b_siberite_mine ;
6507: LD_ADDR_OWVAR 42
6511: PUSH
6512: LD_INT 30
6514: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
6515: LD_VAR 0 22
6519: PUSH
6520: LD_INT 1
6522: ARRAY
6523: PPUSH
6524: LD_VAR 0 22
6528: PUSH
6529: LD_INT 2
6531: ARRAY
6532: PPUSH
6533: LD_INT 0
6535: PPUSH
6536: CALL_OW 47
// end ; end ;
6540: GO 6409
6542: POP
6543: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
6544: LD_ADDR_VAR 0 5
6548: PUSH
6549: LD_EXP 48
6553: PUSH
6554: LD_VAR 0 4
6558: ARRAY
6559: PUSH
6560: LD_VAR 0 2
6564: ARRAY
6565: PUSH
6566: LD_INT 1
6568: ARRAY
6569: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
6570: LD_ADDR_VAR 0 6
6574: PUSH
6575: LD_EXP 48
6579: PUSH
6580: LD_VAR 0 4
6584: ARRAY
6585: PUSH
6586: LD_VAR 0 2
6590: ARRAY
6591: PUSH
6592: LD_INT 2
6594: ARRAY
6595: ST_TO_ADDR
// if base = 1 then
6596: LD_VAR 0 2
6600: PUSH
6601: LD_INT 1
6603: EQUAL
6604: IFFALSE 6712
// if def_morale_flags then
6606: LD_EXP 14
6610: IFFALSE 6712
// SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , def_bf_params [ 1 ] ] , [ bfo_defend_bonus_vehicle , def_bf_params [ 2 ] ] , [ bfo_defend_bonus_building , def_bf_params [ 3 ] ] , [ bfo_range , 17 ] , [ bfo_height , def_bf_params [ 4 ] ] ] ) ;
6612: LD_VAR 0 1
6616: PPUSH
6617: LD_VAR 0 5
6621: PPUSH
6622: LD_VAR 0 6
6626: PPUSH
6627: LD_INT 1
6629: PUSH
6630: LD_EXP 33
6634: PUSH
6635: LD_INT 1
6637: ARRAY
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PUSH
6643: LD_INT 2
6645: PUSH
6646: LD_EXP 33
6650: PUSH
6651: LD_INT 2
6653: ARRAY
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 3
6661: PUSH
6662: LD_EXP 33
6666: PUSH
6667: LD_INT 3
6669: ARRAY
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: PUSH
6675: LD_INT 10
6677: PUSH
6678: LD_INT 17
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PUSH
6685: LD_INT 20
6687: PUSH
6688: LD_EXP 33
6692: PUSH
6693: LD_INT 4
6695: ARRAY
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PPUSH
6708: CALL_OW 418
// if number_of_people [ base ] then
6712: LD_EXP 18
6716: PUSH
6717: LD_VAR 0 2
6721: ARRAY
6722: IFFALSE 6868
// begin neng := number_of_people [ base ] ;
6724: LD_ADDR_VAR 0 17
6728: PUSH
6729: LD_EXP 18
6733: PUSH
6734: LD_VAR 0 2
6738: ARRAY
6739: ST_TO_ADDR
// nmech := neng div 4 ;
6740: LD_ADDR_VAR 0 19
6744: PUSH
6745: LD_VAR 0 17
6749: PUSH
6750: LD_INT 4
6752: DIV
6753: ST_TO_ADDR
// neng := neng - nmech ;
6754: LD_ADDR_VAR 0 17
6758: PUSH
6759: LD_VAR 0 17
6763: PUSH
6764: LD_VAR 0 19
6768: MINUS
6769: ST_TO_ADDR
// nsci := neng div 3 ;
6770: LD_ADDR_VAR 0 18
6774: PUSH
6775: LD_VAR 0 17
6779: PUSH
6780: LD_INT 3
6782: DIV
6783: ST_TO_ADDR
// if nsci < 1 then
6784: LD_VAR 0 18
6788: PUSH
6789: LD_INT 1
6791: LESS
6792: IFFALSE 6802
// nsci := 1 ;
6794: LD_ADDR_VAR 0 18
6798: PUSH
6799: LD_INT 1
6801: ST_TO_ADDR
// neng := neng - nsci ;
6802: LD_ADDR_VAR 0 17
6806: PUSH
6807: LD_VAR 0 17
6811: PUSH
6812: LD_VAR 0 18
6816: MINUS
6817: ST_TO_ADDR
// nsol := neng div 2 ;
6818: LD_ADDR_VAR 0 20
6822: PUSH
6823: LD_VAR 0 17
6827: PUSH
6828: LD_INT 2
6830: DIV
6831: ST_TO_ADDR
// neng := neng - nsol ;
6832: LD_ADDR_VAR 0 17
6836: PUSH
6837: LD_VAR 0 17
6841: PUSH
6842: LD_VAR 0 20
6846: MINUS
6847: ST_TO_ADDR
// if neng < 1 then
6848: LD_VAR 0 17
6852: PUSH
6853: LD_INT 1
6855: LESS
6856: IFFALSE 6866
// neng := 1 ;
6858: LD_ADDR_VAR 0 17
6862: PUSH
6863: LD_INT 1
6865: ST_TO_ADDR
// end else
6866: GO 6900
// begin neng := 0 ;
6868: LD_ADDR_VAR 0 17
6872: PUSH
6873: LD_INT 0
6875: ST_TO_ADDR
// nsci := 0 ;
6876: LD_ADDR_VAR 0 18
6880: PUSH
6881: LD_INT 0
6883: ST_TO_ADDR
// nmech := 0 ;
6884: LD_ADDR_VAR 0 19
6888: PUSH
6889: LD_INT 0
6891: ST_TO_ADDR
// nsol := 0 ;
6892: LD_ADDR_VAR 0 20
6896: PUSH
6897: LD_INT 0
6899: ST_TO_ADDR
// end ; commander := true ;
6900: LD_ADDR_EXP 56
6904: PUSH
6905: LD_INT 1
6907: ST_TO_ADDR
// soldiers_created := 0 ;
6908: LD_ADDR_LOC 3
6912: PUSH
6913: LD_INT 0
6915: ST_TO_ADDR
// for i := 1 to are_breastworks [ base ] do
6916: LD_ADDR_VAR 0 7
6920: PUSH
6921: DOUBLE
6922: LD_INT 1
6924: DEC
6925: ST_TO_ADDR
6926: LD_EXP 24
6930: PUSH
6931: LD_VAR 0 2
6935: ARRAY
6936: PUSH
6937: FOR_TO
6938: IFFALSE 7332
// begin if are_breastworks [ base ] [ i ] = 1 then
6940: LD_EXP 24
6944: PUSH
6945: LD_VAR 0 2
6949: ARRAY
6950: PUSH
6951: LD_VAR 0 7
6955: ARRAY
6956: PUSH
6957: LD_INT 1
6959: EQUAL
6960: IFFALSE 6972
// bc_type := b_breastwork else
6962: LD_ADDR_OWVAR 42
6966: PUSH
6967: LD_INT 31
6969: ST_TO_ADDR
6970: GO 6980
// bc_type := b_bunker ;
6972: LD_ADDR_OWVAR 42
6976: PUSH
6977: LD_INT 32
6979: ST_TO_ADDR
// x := breastworks_def [ pos ] [ base ] [ i ] [ 1 ] ;
6980: LD_ADDR_VAR 0 5
6984: PUSH
6985: LD_EXP 50
6989: PUSH
6990: LD_VAR 0 4
6994: ARRAY
6995: PUSH
6996: LD_VAR 0 2
7000: ARRAY
7001: PUSH
7002: LD_VAR 0 7
7006: ARRAY
7007: PUSH
7008: LD_INT 1
7010: ARRAY
7011: ST_TO_ADDR
// y := breastworks_def [ pos ] [ base ] [ i ] [ 2 ] ;
7012: LD_ADDR_VAR 0 6
7016: PUSH
7017: LD_EXP 50
7021: PUSH
7022: LD_VAR 0 4
7026: ARRAY
7027: PUSH
7028: LD_VAR 0 2
7032: ARRAY
7033: PUSH
7034: LD_VAR 0 7
7038: ARRAY
7039: PUSH
7040: LD_INT 2
7042: ARRAY
7043: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , breastworks_def [ pos ] [ base ] [ i ] [ 3 ] ) ;
7044: LD_ADDR_VAR 0 11
7048: PUSH
7049: LD_VAR 0 5
7053: PPUSH
7054: LD_VAR 0 6
7058: PPUSH
7059: LD_EXP 50
7063: PUSH
7064: LD_VAR 0 4
7068: ARRAY
7069: PUSH
7070: LD_VAR 0 2
7074: ARRAY
7075: PUSH
7076: LD_VAR 0 7
7080: ARRAY
7081: PUSH
7082: LD_INT 3
7084: ARRAY
7085: PPUSH
7086: CALL_OW 47
7090: ST_TO_ADDR
// if bc_type = b_bunker then
7091: LD_OWVAR 42
7095: PUSH
7096: LD_INT 32
7098: EQUAL
7099: IFFALSE 7176
// case uc_nation of nation_american :
7101: LD_OWVAR 21
7105: PUSH
7106: LD_INT 1
7108: DOUBLE
7109: EQUAL
7110: IFTRUE 7114
7112: GO 7129
7114: POP
// PlaceWeaponTurret ( br , us_machine_gun ) ; nation_arabian :
7115: LD_VAR 0 11
7119: PPUSH
7120: LD_INT 2
7122: PPUSH
7123: CALL_OW 431
7127: GO 7176
7129: LD_INT 2
7131: DOUBLE
7132: EQUAL
7133: IFTRUE 7137
7135: GO 7152
7137: POP
// PlaceWeaponTurret ( br , ar_double_machine_gun ) ; nation_russian :
7138: LD_VAR 0 11
7142: PPUSH
7143: LD_INT 24
7145: PPUSH
7146: CALL_OW 431
7150: GO 7176
7152: LD_INT 3
7154: DOUBLE
7155: EQUAL
7156: IFTRUE 7160
7158: GO 7175
7160: POP
// PlaceWeaponTurret ( br , ru_heavy_machine_gun ) ; end ;
7161: LD_VAR 0 11
7165: PPUSH
7166: LD_INT 42
7168: PPUSH
7169: CALL_OW 431
7173: GO 7176
7175: POP
// if i <= nsol then
7176: LD_VAR 0 7
7180: PUSH
7181: LD_VAR 0 20
7185: LESSEQUAL
7186: IFFALSE 7330
// begin x := ShiftX ( x , breastworks_def [ pos ] [ base ] [ i ] [ 3 ] , 2 ) ;
7188: LD_ADDR_VAR 0 5
7192: PUSH
7193: LD_VAR 0 5
7197: PPUSH
7198: LD_EXP 50
7202: PUSH
7203: LD_VAR 0 4
7207: ARRAY
7208: PUSH
7209: LD_VAR 0 2
7213: ARRAY
7214: PUSH
7215: LD_VAR 0 7
7219: ARRAY
7220: PUSH
7221: LD_INT 3
7223: ARRAY
7224: PPUSH
7225: LD_INT 2
7227: PPUSH
7228: CALL_OW 272
7232: ST_TO_ADDR
// y := ShiftY ( y , breastworks_def [ pos ] [ base ] [ i ] [ 3 ] , 2 ) ;
7233: LD_ADDR_VAR 0 6
7237: PUSH
7238: LD_VAR 0 6
7242: PPUSH
7243: LD_EXP 50
7247: PUSH
7248: LD_VAR 0 4
7252: ARRAY
7253: PUSH
7254: LD_VAR 0 2
7258: ARRAY
7259: PUSH
7260: LD_VAR 0 7
7264: ARRAY
7265: PUSH
7266: LD_INT 3
7268: ARRAY
7269: PPUSH
7270: LD_INT 2
7272: PPUSH
7273: CALL_OW 273
7277: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 , commander ) [ 1 ] ;
7278: LD_ADDR_VAR 0 10
7282: PUSH
7283: LD_INT 1
7285: PPUSH
7286: LD_INT 1
7288: PPUSH
7289: LD_VAR 0 5
7293: PPUSH
7294: LD_VAR 0 6
7298: PPUSH
7299: LD_INT 0
7301: PPUSH
7302: LD_ADDR_EXP 56
7306: PPUSH
7307: CALL 4877 0 6
7311: PUSH
7312: LD_INT 1
7314: ARRAY
7315: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
7316: LD_VAR 0 10
7320: PPUSH
7321: LD_VAR 0 11
7325: PPUSH
7326: CALL_OW 120
// end ; end ;
7330: GO 6937
7332: POP
7333: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
7334: LD_ADDR_VAR 0 5
7338: PUSH
7339: LD_EXP 48
7343: PUSH
7344: LD_VAR 0 4
7348: ARRAY
7349: PUSH
7350: LD_VAR 0 2
7354: ARRAY
7355: PUSH
7356: LD_INT 1
7358: ARRAY
7359: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
7360: LD_ADDR_VAR 0 6
7364: PUSH
7365: LD_EXP 48
7369: PUSH
7370: LD_VAR 0 4
7374: ARRAY
7375: PUSH
7376: LD_VAR 0 2
7380: ARRAY
7381: PUSH
7382: LD_INT 2
7384: ARRAY
7385: ST_TO_ADDR
// if nsol > are_breastworks [ base ] then
7386: LD_VAR 0 20
7390: PUSH
7391: LD_EXP 24
7395: PUSH
7396: LD_VAR 0 2
7400: ARRAY
7401: GREATER
7402: IFFALSE 7562
// if arm then
7404: LD_VAR 0 15
7408: IFFALSE 7520
// begin p := prepare_people ( nsol - are_breastworks [ base ] , class_soldier , ShiftX ( GetX ( arm ) , GetDir ( arm ) , 3 ) , ShiftY ( GetY ( arm ) , GetDir ( arm ) , 3 ) , 3 , commander ) ;
7410: LD_ADDR_VAR 0 16
7414: PUSH
7415: LD_VAR 0 20
7419: PUSH
7420: LD_EXP 24
7424: PUSH
7425: LD_VAR 0 2
7429: ARRAY
7430: MINUS
7431: PPUSH
7432: LD_INT 1
7434: PPUSH
7435: LD_VAR 0 15
7439: PPUSH
7440: CALL_OW 250
7444: PPUSH
7445: LD_VAR 0 15
7449: PPUSH
7450: CALL_OW 254
7454: PPUSH
7455: LD_INT 3
7457: PPUSH
7458: CALL_OW 272
7462: PPUSH
7463: LD_VAR 0 15
7467: PPUSH
7468: CALL_OW 251
7472: PPUSH
7473: LD_VAR 0 15
7477: PPUSH
7478: CALL_OW 254
7482: PPUSH
7483: LD_INT 3
7485: PPUSH
7486: CALL_OW 273
7490: PPUSH
7491: LD_INT 3
7493: PPUSH
7494: LD_ADDR_EXP 56
7498: PPUSH
7499: CALL 4877 0 6
7503: ST_TO_ADDR
// ComEnterUnit ( p , arm ) end else
7504: LD_VAR 0 16
7508: PPUSH
7509: LD_VAR 0 15
7513: PPUSH
7514: CALL_OW 120
7518: GO 7562
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , x , y , 5 , commander ) ;
7520: LD_VAR 0 20
7524: PUSH
7525: LD_EXP 24
7529: PUSH
7530: LD_VAR 0 2
7534: ARRAY
7535: MINUS
7536: PPUSH
7537: LD_INT 1
7539: PPUSH
7540: LD_VAR 0 5
7544: PPUSH
7545: LD_VAR 0 6
7549: PPUSH
7550: LD_INT 5
7552: PPUSH
7553: LD_ADDR_EXP 56
7557: PPUSH
7558: CALL 4877 0 6
// if arm then
7562: LD_VAR 0 15
7566: IFFALSE 7666
// begin p := prepare_people ( neng , class_engineer , ShiftX ( GetX ( dep ) , GetDir ( dep ) , 3 ) , ShiftY ( GetY ( dep ) , GetDir ( dep ) , 3 ) , 3 , commander ) ;
7568: LD_ADDR_VAR 0 16
7572: PUSH
7573: LD_VAR 0 17
7577: PPUSH
7578: LD_INT 2
7580: PPUSH
7581: LD_VAR 0 12
7585: PPUSH
7586: CALL_OW 250
7590: PPUSH
7591: LD_VAR 0 12
7595: PPUSH
7596: CALL_OW 254
7600: PPUSH
7601: LD_INT 3
7603: PPUSH
7604: CALL_OW 272
7608: PPUSH
7609: LD_VAR 0 12
7613: PPUSH
7614: CALL_OW 251
7618: PPUSH
7619: LD_VAR 0 12
7623: PPUSH
7624: CALL_OW 254
7628: PPUSH
7629: LD_INT 3
7631: PPUSH
7632: CALL_OW 273
7636: PPUSH
7637: LD_INT 3
7639: PPUSH
7640: LD_ADDR_EXP 56
7644: PPUSH
7645: CALL 4877 0 6
7649: ST_TO_ADDR
// ComEnterUnit ( p , dep ) end else
7650: LD_VAR 0 16
7654: PPUSH
7655: LD_VAR 0 12
7659: PPUSH
7660: CALL_OW 120
7664: GO 7696
// prepare_people ( neng , class_engineer , x , y , 5 , commander ) ;
7666: LD_VAR 0 17
7670: PPUSH
7671: LD_INT 2
7673: PPUSH
7674: LD_VAR 0 5
7678: PPUSH
7679: LD_VAR 0 6
7683: PPUSH
7684: LD_INT 5
7686: PPUSH
7687: LD_ADDR_EXP 56
7691: PPUSH
7692: CALL 4877 0 6
// if fact then
7696: LD_VAR 0 14
7700: IFFALSE 7800
// begin p := prepare_people ( nmech , class_mechanic , ShiftX ( GetX ( fact ) , GetDir ( fact ) , 3 ) , ShiftY ( GetY ( fact ) , GetDir ( fact ) , 3 ) , 3 , commander ) ;
7702: LD_ADDR_VAR 0 16
7706: PUSH
7707: LD_VAR 0 19
7711: PPUSH
7712: LD_INT 3
7714: PPUSH
7715: LD_VAR 0 14
7719: PPUSH
7720: CALL_OW 250
7724: PPUSH
7725: LD_VAR 0 14
7729: PPUSH
7730: CALL_OW 254
7734: PPUSH
7735: LD_INT 3
7737: PPUSH
7738: CALL_OW 272
7742: PPUSH
7743: LD_VAR 0 14
7747: PPUSH
7748: CALL_OW 251
7752: PPUSH
7753: LD_VAR 0 14
7757: PPUSH
7758: CALL_OW 254
7762: PPUSH
7763: LD_INT 3
7765: PPUSH
7766: CALL_OW 273
7770: PPUSH
7771: LD_INT 3
7773: PPUSH
7774: LD_ADDR_EXP 56
7778: PPUSH
7779: CALL 4877 0 6
7783: ST_TO_ADDR
// ComEnterUnit ( p , fact ) ;
7784: LD_VAR 0 16
7788: PPUSH
7789: LD_VAR 0 14
7793: PPUSH
7794: CALL_OW 120
// end else
7798: GO 7830
// prepare_people ( nmech , class_mechanic , x , y , 5 , commander ) ;
7800: LD_VAR 0 19
7804: PPUSH
7805: LD_INT 3
7807: PPUSH
7808: LD_VAR 0 5
7812: PPUSH
7813: LD_VAR 0 6
7817: PPUSH
7818: LD_INT 5
7820: PPUSH
7821: LD_ADDR_EXP 56
7825: PPUSH
7826: CALL 4877 0 6
// if lab then
7830: LD_VAR 0 13
7834: IFFALSE 7934
// begin p := prepare_people ( nsci , class_scientistic , ShiftX ( GetX ( lab ) , GetDir ( lab ) , 3 ) , ShiftY ( GetY ( lab ) , GetDir ( lab ) , 3 ) , 3 , commander ) ;
7836: LD_ADDR_VAR 0 16
7840: PUSH
7841: LD_VAR 0 18
7845: PPUSH
7846: LD_INT 4
7848: PPUSH
7849: LD_VAR 0 13
7853: PPUSH
7854: CALL_OW 250
7858: PPUSH
7859: LD_VAR 0 13
7863: PPUSH
7864: CALL_OW 254
7868: PPUSH
7869: LD_INT 3
7871: PPUSH
7872: CALL_OW 272
7876: PPUSH
7877: LD_VAR 0 13
7881: PPUSH
7882: CALL_OW 251
7886: PPUSH
7887: LD_VAR 0 13
7891: PPUSH
7892: CALL_OW 254
7896: PPUSH
7897: LD_INT 3
7899: PPUSH
7900: CALL_OW 273
7904: PPUSH
7905: LD_INT 3
7907: PPUSH
7908: LD_ADDR_EXP 56
7912: PPUSH
7913: CALL 4877 0 6
7917: ST_TO_ADDR
// ComEnterUnit ( p , lab ) end else
7918: LD_VAR 0 16
7922: PPUSH
7923: LD_VAR 0 13
7927: PPUSH
7928: CALL_OW 120
7932: GO 7964
// prepare_people ( nsci , class_scientistic , x , y , 5 , commander ) ;
7934: LD_VAR 0 18
7938: PPUSH
7939: LD_INT 4
7941: PPUSH
7942: LD_VAR 0 5
7946: PPUSH
7947: LD_VAR 0 6
7951: PPUSH
7952: LD_INT 5
7954: PPUSH
7955: LD_ADDR_EXP 56
7959: PPUSH
7960: CALL 4877 0 6
// if def_siberite_detection then
7964: LD_EXP 8
7968: IFFALSE 7987
// SetTech ( tech_SibDet , side , state_researched ) else
7970: LD_INT 20
7972: PPUSH
7973: LD_VAR 0 1
7977: PPUSH
7978: LD_INT 2
7980: PPUSH
7981: CALL_OW 322
7985: GO 8002
// SetTech ( tech_SibDet , side , state_enabled ) ;
7987: LD_INT 20
7989: PPUSH
7990: LD_VAR 0 1
7994: PPUSH
7995: LD_INT 1
7997: PPUSH
7998: CALL_OW 322
// if def_siberite_bomb then
8002: LD_EXP 15
8006: IFFALSE 8025
// SetTech ( tech_SibFiss , side , state_enabled ) else
8008: LD_INT 25
8010: PPUSH
8011: LD_VAR 0 1
8015: PPUSH
8016: LD_INT 1
8018: PPUSH
8019: CALL_OW 322
8023: GO 8040
// SetTech ( tech_SibFiss , side , state_disabled ) ;
8025: LD_INT 25
8027: PPUSH
8028: LD_VAR 0 1
8032: PPUSH
8033: LD_INT 0
8035: PPUSH
8036: CALL_OW 322
// max = 0 ;
8040: LD_ADDR_VAR 0 23
8044: PUSH
8045: LD_INT 0
8047: ST_TO_ADDR
// for un in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
8048: LD_ADDR_VAR 0 9
8052: PUSH
8053: LD_INT 22
8055: PUSH
8056: LD_VAR 0 1
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 21
8067: PUSH
8068: LD_INT 1
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 69
8083: PUSH
8084: FOR_IN
8085: IFFALSE 8127
// begin if GetSkill ( un , skill_engineering ) > max then
8087: LD_VAR 0 9
8091: PPUSH
8092: LD_INT 2
8094: PPUSH
8095: CALL_OW 259
8099: PUSH
8100: LD_VAR 0 23
8104: GREATER
8105: IFFALSE 8125
// max := GetSkill ( un , skill_engineering ) ;
8107: LD_ADDR_VAR 0 23
8111: PUSH
8112: LD_VAR 0 9
8116: PPUSH
8117: LD_INT 2
8119: PPUSH
8120: CALL_OW 259
8124: ST_TO_ADDR
// end ;
8125: GO 8084
8127: POP
8128: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) , max ) ;
8129: LD_INT 22
8131: PUSH
8132: LD_VAR 0 1
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PUSH
8141: LD_INT 21
8143: PUSH
8144: LD_INT 3
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: EMPTY
8152: LIST
8153: LIST
8154: PPUSH
8155: CALL_OW 69
8159: PPUSH
8160: LD_VAR 0 23
8164: PPUSH
8165: CALL_OW 241
// if not global_defined then
8169: LD_LOC 2
8173: NOT
8174: IFFALSE 8184
// global_defined := true ;
8176: LD_ADDR_LOC 2
8180: PUSH
8181: LD_INT 1
8183: ST_TO_ADDR
// end ;
8184: LD_VAR 0 3
8188: RET
// function prepare_sides ; var i ; begin
8189: LD_INT 0
8191: PPUSH
8192: PPUSH
// global_units := [ ] ;
8193: LD_ADDR_LOC 1
8197: PUSH
8198: EMPTY
8199: ST_TO_ADDR
// global_defined := false ;
8200: LD_ADDR_LOC 2
8204: PUSH
8205: LD_INT 0
8207: ST_TO_ADDR
// for i := 1 to Side_Positions do
8208: LD_ADDR_VAR 0 2
8212: PUSH
8213: DOUBLE
8214: LD_INT 1
8216: DEC
8217: ST_TO_ADDR
8218: LD_EXP 42
8222: PUSH
8223: FOR_TO
8224: IFFALSE 8264
// if Side_Positions [ i ] then
8226: LD_EXP 42
8230: PUSH
8231: LD_VAR 0 2
8235: ARRAY
8236: IFFALSE 8262
// begin prepare_side_base ( i , 1 ) ;
8238: LD_VAR 0 2
8242: PPUSH
8243: LD_INT 1
8245: PPUSH
8246: CALL 5284 0 2
// prepare_side_base ( i , 2 ) ;
8250: LD_VAR 0 2
8254: PPUSH
8255: LD_INT 2
8257: PPUSH
8258: CALL 5284 0 2
// end ;
8262: GO 8223
8264: POP
8265: POP
// end ;
8266: LD_VAR 0 1
8270: RET
// function prepare_apemen ; var i , ape_names , n1 , n2 , ape ; begin
8271: LD_INT 0
8273: PPUSH
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
// if number_of_apemen = 0 then
8279: LD_EXP 34
8283: PUSH
8284: LD_INT 0
8286: EQUAL
8287: IFFALSE 8291
// exit ;
8289: GO 8624
// ape_names = [ Ugh , Urgh , Argh , Aargh , Hrumph , Grumph , Ok , Ook , Ooook , Oorg , Eghrr , Rrrr , Bark , Wraughrr , :-) , Hrgh , Hur , Yeargh ] ;
8291: LD_ADDR_VAR 0 3
8295: PUSH
8296: LD_STRING Ugh
8298: PUSH
8299: LD_STRING Urgh
8301: PUSH
8302: LD_STRING Argh
8304: PUSH
8305: LD_STRING Aargh
8307: PUSH
8308: LD_STRING Hrumph
8310: PUSH
8311: LD_STRING Grumph
8313: PUSH
8314: LD_STRING Ok
8316: PUSH
8317: LD_STRING Ook
8319: PUSH
8320: LD_STRING Ooook
8322: PUSH
8323: LD_STRING Oorg
8325: PUSH
8326: LD_STRING Eghrr
8328: PUSH
8329: LD_STRING Rrrr
8331: PUSH
8332: LD_STRING Bark
8334: PUSH
8335: LD_STRING Wraughrr
8337: PUSH
8338: LD_STRING :-)
8340: PUSH
8341: LD_STRING Hrgh
8343: PUSH
8344: LD_STRING Hur
8346: PUSH
8347: LD_STRING Yeargh
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: ST_TO_ADDR
// for i := 1 to number_of_apemen do
8370: LD_ADDR_VAR 0 2
8374: PUSH
8375: DOUBLE
8376: LD_INT 1
8378: DEC
8379: ST_TO_ADDR
8380: LD_EXP 34
8384: PUSH
8385: FOR_TO
8386: IFFALSE 8622
// begin uc_side := 0 ;
8388: LD_ADDR_OWVAR 20
8392: PUSH
8393: LD_INT 0
8395: ST_TO_ADDR
// uc_nation := nation_nature ;
8396: LD_ADDR_OWVAR 21
8400: PUSH
8401: LD_INT 0
8403: ST_TO_ADDR
// hc_class := class_apeman ;
8404: LD_ADDR_OWVAR 28
8408: PUSH
8409: LD_INT 12
8411: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 1 , 1 ] ;
8412: LD_ADDR_OWVAR 30
8416: PUSH
8417: LD_INT 1
8419: PUSH
8420: LD_INT 1
8422: PUSH
8423: LD_INT 1
8425: PUSH
8426: LD_INT 1
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: ST_TO_ADDR
// hc_skills := [ initial_level - 1 , initial_level - 1 , initial_level - 1 , initial_level - 1 ] ;
8435: LD_ADDR_OWVAR 31
8439: PUSH
8440: LD_EXP 26
8444: PUSH
8445: LD_INT 1
8447: MINUS
8448: PUSH
8449: LD_EXP 26
8453: PUSH
8454: LD_INT 1
8456: MINUS
8457: PUSH
8458: LD_EXP 26
8462: PUSH
8463: LD_INT 1
8465: MINUS
8466: PUSH
8467: LD_EXP 26
8471: PUSH
8472: LD_INT 1
8474: MINUS
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
8482: LD_ADDR_OWVAR 29
8486: PUSH
8487: LD_INT 10
8489: PUSH
8490: LD_INT 12
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: ST_TO_ADDR
// hc_sex := sex_male ;
8497: LD_ADDR_OWVAR 27
8501: PUSH
8502: LD_INT 1
8504: ST_TO_ADDR
// n1 := ape_names [ Rand ( 1 , ape_names ) ] ;
8505: LD_ADDR_VAR 0 4
8509: PUSH
8510: LD_VAR 0 3
8514: PUSH
8515: LD_INT 1
8517: PPUSH
8518: LD_VAR 0 3
8522: PPUSH
8523: CALL_OW 12
8527: ARRAY
8528: ST_TO_ADDR
// repeat n2 := ape_names [ Rand ( 1 , ape_names ) ] ;
8529: LD_ADDR_VAR 0 5
8533: PUSH
8534: LD_VAR 0 3
8538: PUSH
8539: LD_INT 1
8541: PPUSH
8542: LD_VAR 0 3
8546: PPUSH
8547: CALL_OW 12
8551: ARRAY
8552: ST_TO_ADDR
// until n1 <> n2 ;
8553: LD_VAR 0 4
8557: PUSH
8558: LD_VAR 0 5
8562: NONEQUAL
8563: IFFALSE 8529
// hc_name := n1 &   & n2 ;
8565: LD_ADDR_OWVAR 26
8569: PUSH
8570: LD_VAR 0 4
8574: PUSH
8575: LD_STRING  
8577: STR
8578: PUSH
8579: LD_VAR 0 5
8583: STR
8584: ST_TO_ADDR
// hc_importance := 0 ;
8585: LD_ADDR_OWVAR 32
8589: PUSH
8590: LD_INT 0
8592: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
8593: LD_ADDR_OWVAR 35
8597: PUSH
8598: LD_INT 20
8600: NEG
8601: PPUSH
8602: LD_INT 20
8604: PPUSH
8605: CALL_OW 12
8609: ST_TO_ADDR
// ape := CreateHuman ;
8610: LD_ADDR_VAR 0 6
8614: PUSH
8615: CALL_OW 44
8619: ST_TO_ADDR
// end ;
8620: GO 8385
8622: POP
8623: POP
// end ;
8624: LD_VAR 0 1
8628: RET
// starting begin enable_human_prediction := true ;
8629: LD_ADDR_OWVAR 51
8633: PUSH
8634: LD_INT 1
8636: ST_TO_ADDR
// mp_selectmsg := true ;
8637: LD_ADDR_OWVAR 13
8641: PUSH
8642: LD_INT 1
8644: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
8645: CALL 0 0 0
// prepare_map_coordinates ;
8649: CALL 3264 0 0
// prepare_sides ;
8653: CALL 8189 0 0
// prepare_apemen ;
8657: CALL 8271 0 0
// your_side := Player_Side ;
8661: LD_ADDR_OWVAR 2
8665: PUSH
8666: LD_EXP 38
8670: ST_TO_ADDR
// ResetFog ;
8671: CALL_OW 335
// music_nat := Side_Nations [ your_side ] ;
8675: LD_ADDR_OWVAR 71
8679: PUSH
8680: LD_EXP 43
8684: PUSH
8685: LD_OWVAR 2
8689: ARRAY
8690: ST_TO_ADDR
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 2 ] ) ;
8691: LD_EXP 48
8695: PUSH
8696: LD_EXP 42
8700: PUSH
8701: LD_OWVAR 2
8705: ARRAY
8706: ARRAY
8707: PUSH
8708: LD_INT 1
8710: ARRAY
8711: PUSH
8712: LD_INT 1
8714: ARRAY
8715: PPUSH
8716: LD_EXP 48
8720: PUSH
8721: LD_EXP 42
8725: PUSH
8726: LD_OWVAR 2
8730: ARRAY
8731: ARRAY
8732: PUSH
8733: LD_INT 1
8735: ARRAY
8736: PUSH
8737: LD_INT 2
8739: ARRAY
8740: PPUSH
8741: CALL_OW 86
// end ; end_of_file
8745: END
// var shipment1 , shipment2 , shipment3 , respawn , inqueue ; export function init_shipments_and_respawning ; begin
8746: LD_INT 0
8748: PPUSH
// shipment1 := [ ] ;
8749: LD_ADDR_LOC 4
8753: PUSH
8754: EMPTY
8755: ST_TO_ADDR
// shipment2 := [ ] ;
8756: LD_ADDR_LOC 5
8760: PUSH
8761: EMPTY
8762: ST_TO_ADDR
// shipment3 := [ ] ;
8763: LD_ADDR_LOC 6
8767: PUSH
8768: EMPTY
8769: ST_TO_ADDR
// end ;
8770: LD_VAR 0 1
8774: RET
// every 0 0$5 + 0 0$1.1 do var d , q ;
8775: GO 8777
8777: DISABLE
8778: LD_INT 0
8780: PPUSH
8781: PPUSH
// begin case tick of 1 .. 1 1$0 :
8782: LD_OWVAR 1
8786: PUSH
8787: LD_INT 1
8789: DOUBLE
8790: GREATEREQUAL
8791: IFFALSE 8799
8793: LD_INT 2100
8795: DOUBLE
8796: LESSEQUAL
8797: IFTRUE 8801
8799: GO 8812
8801: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
8802: LD_ADDR_VAR 0 1
8806: PUSH
8807: LD_INT 150
8809: ST_TO_ADDR
8810: GO 8995
8812: LD_INT 2100
8814: PUSH
8815: LD_INT 1
8817: PLUS
8818: DOUBLE
8819: GREATEREQUAL
8820: IFFALSE 8828
8822: LD_INT 10500
8824: DOUBLE
8825: LESSEQUAL
8826: IFTRUE 8830
8828: GO 8841
8830: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
8831: LD_ADDR_VAR 0 1
8835: PUSH
8836: LD_INT 100
8838: ST_TO_ADDR
8839: GO 8995
8841: LD_INT 10500
8843: PUSH
8844: LD_INT 1
8846: PLUS
8847: DOUBLE
8848: GREATEREQUAL
8849: IFFALSE 8857
8851: LD_INT 21000
8853: DOUBLE
8854: LESSEQUAL
8855: IFTRUE 8859
8857: GO 8870
8859: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
8860: LD_ADDR_VAR 0 1
8864: PUSH
8865: LD_INT 90
8867: ST_TO_ADDR
8868: GO 8995
8870: LD_INT 21000
8872: PUSH
8873: LD_INT 1
8875: PLUS
8876: DOUBLE
8877: GREATEREQUAL
8878: IFFALSE 8886
8880: LD_INT 42000
8882: DOUBLE
8883: LESSEQUAL
8884: IFTRUE 8888
8886: GO 8899
8888: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
8889: LD_ADDR_VAR 0 1
8893: PUSH
8894: LD_INT 70
8896: ST_TO_ADDR
8897: GO 8995
8899: LD_INT 42000
8901: PUSH
8902: LD_INT 1
8904: PLUS
8905: DOUBLE
8906: GREATEREQUAL
8907: IFFALSE 8915
8909: LD_INT 63000
8911: DOUBLE
8912: LESSEQUAL
8913: IFTRUE 8917
8915: GO 8928
8917: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
8918: LD_ADDR_VAR 0 1
8922: PUSH
8923: LD_INT 60
8925: ST_TO_ADDR
8926: GO 8995
8928: LD_INT 63000
8930: PUSH
8931: LD_INT 1
8933: PLUS
8934: DOUBLE
8935: GREATEREQUAL
8936: IFFALSE 8944
8938: LD_INT 105000
8940: DOUBLE
8941: LESSEQUAL
8942: IFTRUE 8946
8944: GO 8957
8946: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
8947: LD_ADDR_VAR 0 1
8951: PUSH
8952: LD_INT 35
8954: ST_TO_ADDR
8955: GO 8995
8957: LD_INT 105000
8959: PUSH
8960: LD_INT 1
8962: PLUS
8963: DOUBLE
8964: GREATEREQUAL
8965: IFFALSE 8973
8967: LD_INT 630000
8969: DOUBLE
8970: LESSEQUAL
8971: IFTRUE 8975
8973: GO 8986
8975: POP
// d := 20 ; else
8976: LD_ADDR_VAR 0 1
8980: PUSH
8981: LD_INT 20
8983: ST_TO_ADDR
8984: GO 8995
8986: POP
// d := 0 ; end ;
8987: LD_ADDR_VAR 0 1
8991: PUSH
8992: LD_INT 0
8994: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 3 then
8995: LD_INT 1
8997: PPUSH
8998: LD_INT 10000
9000: PPUSH
9001: CALL_OW 12
9005: PUSH
9006: LD_VAR 0 1
9010: PUSH
9011: LD_EXP 29
9015: MUL
9016: PUSH
9017: LD_INT 3
9019: DIV
9020: LESSEQUAL
9021: IFFALSE 9136
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
9023: LD_INT 1
9025: PPUSH
9026: LD_INT 140
9028: PPUSH
9029: CALL_OW 12
9033: PPUSH
9034: CALL_OW 67
// if shipment1 = [ ] then
9038: LD_LOC 4
9042: PUSH
9043: EMPTY
9044: EQUAL
9045: IFFALSE 9078
// shipment1 := [ Ar1Base1 , Ar1Base2 , Ar2Base1 , Ar2Base2 , Ar1Between , Ar2Between ] ;
9047: LD_ADDR_LOC 4
9051: PUSH
9052: LD_INT 19
9054: PUSH
9055: LD_INT 20
9057: PUSH
9058: LD_INT 15
9060: PUSH
9061: LD_INT 14
9063: PUSH
9064: LD_INT 22
9066: PUSH
9067: LD_INT 16
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: ST_TO_ADDR
// q := shipment1 [ Rand ( 1 , shipment1 ) ] ;
9078: LD_ADDR_VAR 0 2
9082: PUSH
9083: LD_LOC 4
9087: PUSH
9088: LD_INT 1
9090: PPUSH
9091: LD_LOC 4
9095: PPUSH
9096: CALL_OW 12
9100: ARRAY
9101: ST_TO_ADDR
// shipment1 := shipment1 diff [ q ] ;
9102: LD_ADDR_LOC 4
9106: PUSH
9107: LD_LOC 4
9111: PUSH
9112: LD_VAR 0 2
9116: PUSH
9117: EMPTY
9118: LIST
9119: DIFF
9120: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
9121: LD_INT 5
9123: PPUSH
9124: LD_VAR 0 2
9128: PPUSH
9129: LD_INT 1
9131: PPUSH
9132: CALL_OW 55
// end ; enable ;
9136: ENABLE
// end ;
9137: PPOPN 2
9139: END
// every 0 0$5 + 0 0$1.1 do var d , q ;
9140: GO 9142
9142: DISABLE
9143: LD_INT 0
9145: PPUSH
9146: PPUSH
// begin case tick of 1 .. 1 1$0 :
9147: LD_OWVAR 1
9151: PUSH
9152: LD_INT 1
9154: DOUBLE
9155: GREATEREQUAL
9156: IFFALSE 9164
9158: LD_INT 2100
9160: DOUBLE
9161: LESSEQUAL
9162: IFTRUE 9166
9164: GO 9177
9166: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
9167: LD_ADDR_VAR 0 1
9171: PUSH
9172: LD_INT 150
9174: ST_TO_ADDR
9175: GO 9360
9177: LD_INT 2100
9179: PUSH
9180: LD_INT 1
9182: PLUS
9183: DOUBLE
9184: GREATEREQUAL
9185: IFFALSE 9193
9187: LD_INT 10500
9189: DOUBLE
9190: LESSEQUAL
9191: IFTRUE 9195
9193: GO 9206
9195: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
9196: LD_ADDR_VAR 0 1
9200: PUSH
9201: LD_INT 100
9203: ST_TO_ADDR
9204: GO 9360
9206: LD_INT 10500
9208: PUSH
9209: LD_INT 1
9211: PLUS
9212: DOUBLE
9213: GREATEREQUAL
9214: IFFALSE 9222
9216: LD_INT 21000
9218: DOUBLE
9219: LESSEQUAL
9220: IFTRUE 9224
9222: GO 9235
9224: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
9225: LD_ADDR_VAR 0 1
9229: PUSH
9230: LD_INT 90
9232: ST_TO_ADDR
9233: GO 9360
9235: LD_INT 21000
9237: PUSH
9238: LD_INT 1
9240: PLUS
9241: DOUBLE
9242: GREATEREQUAL
9243: IFFALSE 9251
9245: LD_INT 42000
9247: DOUBLE
9248: LESSEQUAL
9249: IFTRUE 9253
9251: GO 9264
9253: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
9254: LD_ADDR_VAR 0 1
9258: PUSH
9259: LD_INT 70
9261: ST_TO_ADDR
9262: GO 9360
9264: LD_INT 42000
9266: PUSH
9267: LD_INT 1
9269: PLUS
9270: DOUBLE
9271: GREATEREQUAL
9272: IFFALSE 9280
9274: LD_INT 63000
9276: DOUBLE
9277: LESSEQUAL
9278: IFTRUE 9282
9280: GO 9293
9282: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
9283: LD_ADDR_VAR 0 1
9287: PUSH
9288: LD_INT 60
9290: ST_TO_ADDR
9291: GO 9360
9293: LD_INT 63000
9295: PUSH
9296: LD_INT 1
9298: PLUS
9299: DOUBLE
9300: GREATEREQUAL
9301: IFFALSE 9309
9303: LD_INT 105000
9305: DOUBLE
9306: LESSEQUAL
9307: IFTRUE 9311
9309: GO 9322
9311: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
9312: LD_ADDR_VAR 0 1
9316: PUSH
9317: LD_INT 35
9319: ST_TO_ADDR
9320: GO 9360
9322: LD_INT 105000
9324: PUSH
9325: LD_INT 1
9327: PLUS
9328: DOUBLE
9329: GREATEREQUAL
9330: IFFALSE 9338
9332: LD_INT 630000
9334: DOUBLE
9335: LESSEQUAL
9336: IFTRUE 9340
9338: GO 9351
9340: POP
// d := 20 ; else
9341: LD_ADDR_VAR 0 1
9345: PUSH
9346: LD_INT 20
9348: ST_TO_ADDR
9349: GO 9360
9351: POP
// d := 0 ; end ;
9352: LD_ADDR_VAR 0 1
9356: PUSH
9357: LD_INT 0
9359: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 4 then
9360: LD_INT 1
9362: PPUSH
9363: LD_INT 10000
9365: PPUSH
9366: CALL_OW 12
9370: PUSH
9371: LD_VAR 0 1
9375: PUSH
9376: LD_EXP 29
9380: MUL
9381: PUSH
9382: LD_INT 4
9384: DIV
9385: LESSEQUAL
9386: IFFALSE 9501
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
9388: LD_INT 1
9390: PPUSH
9391: LD_INT 140
9393: PPUSH
9394: CALL_OW 12
9398: PPUSH
9399: CALL_OW 67
// if shipment2 = [ ] then
9403: LD_LOC 5
9407: PUSH
9408: EMPTY
9409: EQUAL
9410: IFFALSE 9443
// shipment2 := [ Ar1Out1 , Ar1Out2 , Ar1Out3 , Ar2Out1 , Ar2Out2 , Ar2Out3 ] ;
9412: LD_ADDR_LOC 5
9416: PUSH
9417: LD_INT 21
9419: PUSH
9420: LD_INT 23
9422: PUSH
9423: LD_INT 24
9425: PUSH
9426: LD_INT 13
9428: PUSH
9429: LD_INT 17
9431: PUSH
9432: LD_INT 18
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: ST_TO_ADDR
// q := shipment2 [ Rand ( 1 , shipment2 ) ] ;
9443: LD_ADDR_VAR 0 2
9447: PUSH
9448: LD_LOC 5
9452: PUSH
9453: LD_INT 1
9455: PPUSH
9456: LD_LOC 5
9460: PPUSH
9461: CALL_OW 12
9465: ARRAY
9466: ST_TO_ADDR
// shipment2 := shipment2 diff [ q ] ;
9467: LD_ADDR_LOC 5
9471: PUSH
9472: LD_LOC 5
9476: PUSH
9477: LD_VAR 0 2
9481: PUSH
9482: EMPTY
9483: LIST
9484: DIFF
9485: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
9486: LD_INT 5
9488: PPUSH
9489: LD_VAR 0 2
9493: PPUSH
9494: LD_INT 1
9496: PPUSH
9497: CALL_OW 55
// end ; enable ;
9501: ENABLE
// end ;
9502: PPOPN 2
9504: END
// every 0 0$5 + 0 0$1.1 do var d , q ;
9505: GO 9507
9507: DISABLE
9508: LD_INT 0
9510: PPUSH
9511: PPUSH
// begin case tick of 1 .. 1 1$0 :
9512: LD_OWVAR 1
9516: PUSH
9517: LD_INT 1
9519: DOUBLE
9520: GREATEREQUAL
9521: IFFALSE 9529
9523: LD_INT 2100
9525: DOUBLE
9526: LESSEQUAL
9527: IFTRUE 9531
9529: GO 9542
9531: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
9532: LD_ADDR_VAR 0 1
9536: PUSH
9537: LD_INT 150
9539: ST_TO_ADDR
9540: GO 9725
9542: LD_INT 2100
9544: PUSH
9545: LD_INT 1
9547: PLUS
9548: DOUBLE
9549: GREATEREQUAL
9550: IFFALSE 9558
9552: LD_INT 10500
9554: DOUBLE
9555: LESSEQUAL
9556: IFTRUE 9560
9558: GO 9571
9560: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
9561: LD_ADDR_VAR 0 1
9565: PUSH
9566: LD_INT 100
9568: ST_TO_ADDR
9569: GO 9725
9571: LD_INT 10500
9573: PUSH
9574: LD_INT 1
9576: PLUS
9577: DOUBLE
9578: GREATEREQUAL
9579: IFFALSE 9587
9581: LD_INT 21000
9583: DOUBLE
9584: LESSEQUAL
9585: IFTRUE 9589
9587: GO 9600
9589: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
9590: LD_ADDR_VAR 0 1
9594: PUSH
9595: LD_INT 90
9597: ST_TO_ADDR
9598: GO 9725
9600: LD_INT 21000
9602: PUSH
9603: LD_INT 1
9605: PLUS
9606: DOUBLE
9607: GREATEREQUAL
9608: IFFALSE 9616
9610: LD_INT 42000
9612: DOUBLE
9613: LESSEQUAL
9614: IFTRUE 9618
9616: GO 9629
9618: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
9619: LD_ADDR_VAR 0 1
9623: PUSH
9624: LD_INT 70
9626: ST_TO_ADDR
9627: GO 9725
9629: LD_INT 42000
9631: PUSH
9632: LD_INT 1
9634: PLUS
9635: DOUBLE
9636: GREATEREQUAL
9637: IFFALSE 9645
9639: LD_INT 63000
9641: DOUBLE
9642: LESSEQUAL
9643: IFTRUE 9647
9645: GO 9658
9647: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
9648: LD_ADDR_VAR 0 1
9652: PUSH
9653: LD_INT 60
9655: ST_TO_ADDR
9656: GO 9725
9658: LD_INT 63000
9660: PUSH
9661: LD_INT 1
9663: PLUS
9664: DOUBLE
9665: GREATEREQUAL
9666: IFFALSE 9674
9668: LD_INT 105000
9670: DOUBLE
9671: LESSEQUAL
9672: IFTRUE 9676
9674: GO 9687
9676: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
9677: LD_ADDR_VAR 0 1
9681: PUSH
9682: LD_INT 35
9684: ST_TO_ADDR
9685: GO 9725
9687: LD_INT 105000
9689: PUSH
9690: LD_INT 1
9692: PLUS
9693: DOUBLE
9694: GREATEREQUAL
9695: IFFALSE 9703
9697: LD_INT 630000
9699: DOUBLE
9700: LESSEQUAL
9701: IFTRUE 9705
9703: GO 9716
9705: POP
// d := 20 ; else
9706: LD_ADDR_VAR 0 1
9710: PUSH
9711: LD_INT 20
9713: ST_TO_ADDR
9714: GO 9725
9716: POP
// d := 0 ; end ;
9717: LD_ADDR_VAR 0 1
9721: PUSH
9722: LD_INT 0
9724: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 5 then
9725: LD_INT 1
9727: PPUSH
9728: LD_INT 10000
9730: PPUSH
9731: CALL_OW 12
9735: PUSH
9736: LD_VAR 0 1
9740: PUSH
9741: LD_EXP 29
9745: MUL
9746: PUSH
9747: LD_INT 5
9749: DIV
9750: LESSEQUAL
9751: IFFALSE 9846
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
9753: LD_INT 1
9755: PPUSH
9756: LD_INT 140
9758: PPUSH
9759: CALL_OW 12
9763: PPUSH
9764: CALL_OW 67
// if shipment3 = [ ] then
9768: LD_LOC 6
9772: PUSH
9773: EMPTY
9774: EQUAL
9775: IFFALSE 9788
// shipment3 := [ valley ] ;
9777: LD_ADDR_LOC 6
9781: PUSH
9782: LD_INT 12
9784: PUSH
9785: EMPTY
9786: LIST
9787: ST_TO_ADDR
// q := shipment3 [ Rand ( 1 , shipment3 ) ] ;
9788: LD_ADDR_VAR 0 2
9792: PUSH
9793: LD_LOC 6
9797: PUSH
9798: LD_INT 1
9800: PPUSH
9801: LD_LOC 6
9805: PPUSH
9806: CALL_OW 12
9810: ARRAY
9811: ST_TO_ADDR
// shipment3 := shipment3 diff [ q ] ;
9812: LD_ADDR_LOC 6
9816: PUSH
9817: LD_LOC 6
9821: PUSH
9822: LD_VAR 0 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: DIFF
9830: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
9831: LD_INT 5
9833: PPUSH
9834: LD_VAR 0 2
9838: PPUSH
9839: LD_INT 1
9841: PPUSH
9842: CALL_OW 55
// end ; enable ;
9846: ENABLE
// end ; end_of_file
9847: PPOPN 2
9849: END
// var a ; every 1 do
9850: GO 9852
9852: DISABLE
// begin if not multiplayer then
9853: LD_OWVAR 4
9857: NOT
9858: IFFALSE 9862
// exit ;
9860: GO 9919
// if ( tick >= 100 ) then
9862: LD_OWVAR 1
9866: PUSH
9867: LD_INT 100
9869: GREATEREQUAL
9870: IFFALSE 9890
// if tick mod 10 = 0 then
9872: LD_OWVAR 1
9876: PUSH
9877: LD_INT 10
9879: MOD
9880: PUSH
9881: LD_INT 0
9883: EQUAL
9884: IFFALSE 9890
// MultiplayerCRC ;
9886: CALL_OW 361
// if ( tick >= 100 ) then
9890: LD_OWVAR 1
9894: PUSH
9895: LD_INT 100
9897: GREATEREQUAL
9898: IFFALSE 9918
// if tick mod 10 = 0 then
9900: LD_OWVAR 1
9904: PUSH
9905: LD_INT 10
9907: MOD
9908: PUSH
9909: LD_INT 0
9911: EQUAL
9912: IFFALSE 9918
// DebugLogAll ;
9914: CALL_OW 360
// enable ;
9918: ENABLE
// end ; end_of_file
9919: END
// every 0 0$2 do var win , i ;
9920: GO 9922
9922: DISABLE
9923: LD_INT 0
9925: PPUSH
9926: PPUSH
// begin if your_side then
9927: LD_OWVAR 2
9931: IFFALSE 10110
// if not filterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) then
9933: LD_INT 22
9935: PUSH
9936: LD_OWVAR 2
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: LD_INT 21
9947: PUSH
9948: LD_INT 1
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PPUSH
9959: CALL_OW 69
9963: NOT
9964: IFFALSE 9981
// begin wait ( 0 0$3 ) ;
9966: LD_INT 105
9968: PPUSH
9969: CALL_OW 67
// YouLostInMultiplayer ;
9973: CALL_OW 107
// exit ;
9977: GO 10111
// end else
9979: GO 10110
// begin win := true ;
9981: LD_ADDR_VAR 0 1
9985: PUSH
9986: LD_INT 1
9988: ST_TO_ADDR
// for i := 1 to Side_positions do
9989: LD_ADDR_VAR 0 2
9993: PUSH
9994: DOUBLE
9995: LD_INT 1
9997: DEC
9998: ST_TO_ADDR
9999: LD_EXP 42
10003: PUSH
10004: FOR_TO
10005: IFFALSE 10089
// if Side_positions [ i ] and ( i <> your_side ) then
10007: LD_EXP 42
10011: PUSH
10012: LD_VAR 0 2
10016: ARRAY
10017: PUSH
10018: LD_VAR 0 2
10022: PUSH
10023: LD_OWVAR 2
10027: NONEQUAL
10028: AND
10029: IFFALSE 10087
// begin if MultiplayerSideAlive ( i ) then
10031: LD_VAR 0 2
10035: PPUSH
10036: CALL_OW 108
10040: IFFALSE 10087
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
10042: LD_EXP 40
10046: PUSH
10047: LD_VAR 0 2
10051: ARRAY
10052: NOT
10053: PUSH
10054: LD_EXP 40
10058: PUSH
10059: LD_VAR 0 2
10063: ARRAY
10064: PUSH
10065: LD_EXP 40
10069: PUSH
10070: LD_OWVAR 2
10074: ARRAY
10075: NONEQUAL
10076: OR
10077: IFFALSE 10087
// win := false ;
10079: LD_ADDR_VAR 0 1
10083: PUSH
10084: LD_INT 0
10086: ST_TO_ADDR
// end ;
10087: GO 10004
10089: POP
10090: POP
// if win then
10091: LD_VAR 0 1
10095: IFFALSE 10110
// begin wait ( 0 0$3 ) ;
10097: LD_INT 105
10099: PPUSH
10100: CALL_OW 67
// YouWinInMultiplayer ;
10104: CALL_OW 106
// exit ;
10108: GO 10111
// end ; end ; enable ;
10110: ENABLE
// end ; end_of_file
10111: PPOPN 2
10113: END
// var free , free1 , free2 , new1 , new2 , arr1 , arr2 , seenby1 , seenby2 ; function displ_status ; var st , s1 , s2 ; begin
10114: LD_INT 0
10116: PPUSH
10117: PPUSH
10118: PPUSH
10119: PPUSH
// st := [ #Multi1x1-Time , tick ] ;
10120: LD_ADDR_VAR 0 2
10124: PUSH
10125: LD_STRING #Multi1x1-Time
10127: PUSH
10128: LD_OWVAR 1
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: ST_TO_ADDR
// if not def_people_arrivals then
10137: LD_EXP 11
10141: NOT
10142: IFFALSE 10156
// begin display_strings := st ;
10144: LD_ADDR_OWVAR 47
10148: PUSH
10149: LD_VAR 0 2
10153: ST_TO_ADDR
// exit ;
10154: GO 10331
// end ; if def_people_loyality then
10156: LD_EXP 12
10160: IFFALSE 10288
// begin if free1 then
10162: LD_LOC 11
10166: IFFALSE 10193
// s1 := [ #Multi1x1-InfoL , Left Bottom , ( free1 + 0 ) ] ;
10168: LD_ADDR_VAR 0 3
10172: PUSH
10173: LD_STRING #Multi1x1-InfoL
10175: PUSH
10176: LD_STRING Left Bottom
10178: PUSH
10179: LD_LOC 11
10183: PUSH
10184: LD_INT 0
10186: PLUS
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: ST_TO_ADDR
// if free2 then
10193: LD_LOC 12
10197: IFFALSE 10224
// s2 := [ #Multi1x1-InfoL , Right Top , ( free2 + 0 ) ] ;
10199: LD_ADDR_VAR 0 4
10203: PUSH
10204: LD_STRING #Multi1x1-InfoL
10206: PUSH
10207: LD_STRING Right Top
10209: PUSH
10210: LD_LOC 12
10214: PUSH
10215: LD_INT 0
10217: PLUS
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: LIST
10223: ST_TO_ADDR
// if Side_Positions [ your_side ] <> 2 then
10224: LD_EXP 42
10228: PUSH
10229: LD_OWVAR 2
10233: ARRAY
10234: PUSH
10235: LD_INT 2
10237: NONEQUAL
10238: IFFALSE 10264
// display_strings = st ^ s1 ^ s2 else
10240: LD_ADDR_OWVAR 47
10244: PUSH
10245: LD_VAR 0 2
10249: PUSH
10250: LD_VAR 0 3
10254: ADD
10255: PUSH
10256: LD_VAR 0 4
10260: ADD
10261: ST_TO_ADDR
10262: GO 10286
// display_strings = st ^ s2 ^ s1 ;
10264: LD_ADDR_OWVAR 47
10268: PUSH
10269: LD_VAR 0 2
10273: PUSH
10274: LD_VAR 0 4
10278: ADD
10279: PUSH
10280: LD_VAR 0 3
10284: ADD
10285: ST_TO_ADDR
// end else
10286: GO 10331
// begin if free then
10288: LD_LOC 10
10292: IFFALSE 10315
// s1 := [ Free  & ( free + 0 ) ] ;
10294: LD_ADDR_VAR 0 3
10298: PUSH
10299: LD_STRING Free 
10301: PUSH
10302: LD_LOC 10
10306: PUSH
10307: LD_INT 0
10309: PLUS
10310: STR
10311: PUSH
10312: EMPTY
10313: LIST
10314: ST_TO_ADDR
// display_strings = st ^ s1 ;
10315: LD_ADDR_OWVAR 47
10319: PUSH
10320: LD_VAR 0 2
10324: PUSH
10325: LD_VAR 0 3
10329: ADD
10330: ST_TO_ADDR
// end ; end ;
10331: LD_VAR 0 1
10335: RET
// every 0 0$1 do
10336: GO 10338
10338: DISABLE
// begin if text_info then
10339: LD_EXP 31
10343: IFFALSE 10349
// displ_status ;
10345: CALL 10114 0 0
// enable ;
10349: ENABLE
// end ;
10350: END
// export function prepare_arrivals ; var i , ar , p1 , p2 , pom1 , pom2 ; begin
10351: LD_INT 0
10353: PPUSH
10354: PPUSH
10355: PPUSH
10356: PPUSH
10357: PPUSH
10358: PPUSH
10359: PPUSH
// arr1 := [ ] ;
10360: LD_ADDR_LOC 15
10364: PUSH
10365: EMPTY
10366: ST_TO_ADDR
// arr2 := [ ] ;
10367: LD_ADDR_LOC 16
10371: PUSH
10372: EMPTY
10373: ST_TO_ADDR
// for i := 1 to max_arriving_times do
10374: LD_ADDR_VAR 0 2
10378: PUSH
10379: DOUBLE
10380: LD_INT 1
10382: DEC
10383: ST_TO_ADDR
10384: LD_EXP 30
10388: PUSH
10389: FOR_TO
10390: IFFALSE 10926
// begin case rand ( 1 , 100 ) of 1 .. 45 :
10392: LD_INT 1
10394: PPUSH
10395: LD_INT 100
10397: PPUSH
10398: CALL_OW 12
10402: PUSH
10403: LD_INT 1
10405: DOUBLE
10406: GREATEREQUAL
10407: IFFALSE 10415
10409: LD_INT 45
10411: DOUBLE
10412: LESSEQUAL
10413: IFTRUE 10417
10415: GO 10624
10417: POP
// case rand ( 1 , 100 ) of 1 .. 10 :
10418: LD_INT 1
10420: PPUSH
10421: LD_INT 100
10423: PPUSH
10424: CALL_OW 12
10428: PUSH
10429: LD_INT 1
10431: DOUBLE
10432: GREATEREQUAL
10433: IFFALSE 10441
10435: LD_INT 10
10437: DOUBLE
10438: LESSEQUAL
10439: IFTRUE 10443
10441: GO 10461
10443: POP
// ar := [ Ar1Base1 , Ar2Base1 ] ; 11 .. 20 :
10444: LD_ADDR_VAR 0 3
10448: PUSH
10449: LD_INT 19
10451: PUSH
10452: LD_INT 15
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: ST_TO_ADDR
10459: GO 10622
10461: LD_INT 11
10463: DOUBLE
10464: GREATEREQUAL
10465: IFFALSE 10473
10467: LD_INT 20
10469: DOUBLE
10470: LESSEQUAL
10471: IFTRUE 10475
10473: GO 10493
10475: POP
// ar := [ Ar1Base2 , Ar2Base2 ] ; 21 .. 30 :
10476: LD_ADDR_VAR 0 3
10480: PUSH
10481: LD_INT 20
10483: PUSH
10484: LD_INT 14
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: ST_TO_ADDR
10491: GO 10622
10493: LD_INT 21
10495: DOUBLE
10496: GREATEREQUAL
10497: IFFALSE 10505
10499: LD_INT 30
10501: DOUBLE
10502: LESSEQUAL
10503: IFTRUE 10507
10505: GO 10525
10507: POP
// ar := [ Ar1Between , Ar2Between ] ; 31 .. 55 :
10508: LD_ADDR_VAR 0 3
10512: PUSH
10513: LD_INT 22
10515: PUSH
10516: LD_INT 16
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: ST_TO_ADDR
10523: GO 10622
10525: LD_INT 31
10527: DOUBLE
10528: GREATEREQUAL
10529: IFFALSE 10537
10531: LD_INT 55
10533: DOUBLE
10534: LESSEQUAL
10535: IFTRUE 10539
10537: GO 10557
10539: POP
// ar := [ Ar1Out2 , Ar2Out2 ] ; 56 .. 80 :
10540: LD_ADDR_VAR 0 3
10544: PUSH
10545: LD_INT 23
10547: PUSH
10548: LD_INT 17
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: ST_TO_ADDR
10555: GO 10622
10557: LD_INT 56
10559: DOUBLE
10560: GREATEREQUAL
10561: IFFALSE 10569
10563: LD_INT 80
10565: DOUBLE
10566: LESSEQUAL
10567: IFTRUE 10571
10569: GO 10589
10571: POP
// ar := [ Ar1Out1 , Ar2Out1 ] ; 81 .. 100 :
10572: LD_ADDR_VAR 0 3
10576: PUSH
10577: LD_INT 21
10579: PUSH
10580: LD_INT 13
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: ST_TO_ADDR
10587: GO 10622
10589: LD_INT 81
10591: DOUBLE
10592: GREATEREQUAL
10593: IFFALSE 10601
10595: LD_INT 100
10597: DOUBLE
10598: LESSEQUAL
10599: IFTRUE 10603
10601: GO 10621
10603: POP
// ar := [ Ar1Out3 , Ar2Out3 ] ; end ; 46 .. 85 :
10604: LD_ADDR_VAR 0 3
10608: PUSH
10609: LD_INT 24
10611: PUSH
10612: LD_INT 18
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: ST_TO_ADDR
10619: GO 10622
10621: POP
10622: GO 10878
10624: LD_INT 46
10626: DOUBLE
10627: GREATEREQUAL
10628: IFFALSE 10636
10630: LD_INT 85
10632: DOUBLE
10633: LESSEQUAL
10634: IFTRUE 10638
10636: GO 10845
10638: POP
// case rand ( 1 , 100 ) of 1 .. 5 :
10639: LD_INT 1
10641: PPUSH
10642: LD_INT 100
10644: PPUSH
10645: CALL_OW 12
10649: PUSH
10650: LD_INT 1
10652: DOUBLE
10653: GREATEREQUAL
10654: IFFALSE 10662
10656: LD_INT 5
10658: DOUBLE
10659: LESSEQUAL
10660: IFTRUE 10664
10662: GO 10682
10664: POP
// ar := [ Ar2Base1 , Ar1Base1 ] ; 6 .. 15 :
10665: LD_ADDR_VAR 0 3
10669: PUSH
10670: LD_INT 15
10672: PUSH
10673: LD_INT 19
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: ST_TO_ADDR
10680: GO 10843
10682: LD_INT 6
10684: DOUBLE
10685: GREATEREQUAL
10686: IFFALSE 10694
10688: LD_INT 15
10690: DOUBLE
10691: LESSEQUAL
10692: IFTRUE 10696
10694: GO 10714
10696: POP
// ar := [ Ar2Base2 , Ar1Base2 ] ; 16 .. 30 :
10697: LD_ADDR_VAR 0 3
10701: PUSH
10702: LD_INT 14
10704: PUSH
10705: LD_INT 20
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: ST_TO_ADDR
10712: GO 10843
10714: LD_INT 16
10716: DOUBLE
10717: GREATEREQUAL
10718: IFFALSE 10726
10720: LD_INT 30
10722: DOUBLE
10723: LESSEQUAL
10724: IFTRUE 10728
10726: GO 10746
10728: POP
// ar := [ Ar2Between , Ar1Between ] ; 31 .. 50 :
10729: LD_ADDR_VAR 0 3
10733: PUSH
10734: LD_INT 16
10736: PUSH
10737: LD_INT 22
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: ST_TO_ADDR
10744: GO 10843
10746: LD_INT 31
10748: DOUBLE
10749: GREATEREQUAL
10750: IFFALSE 10758
10752: LD_INT 50
10754: DOUBLE
10755: LESSEQUAL
10756: IFTRUE 10760
10758: GO 10778
10760: POP
// ar := [ Ar2Out2 , Ar1Out2 ] ; 51 .. 75 :
10761: LD_ADDR_VAR 0 3
10765: PUSH
10766: LD_INT 17
10768: PUSH
10769: LD_INT 23
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: ST_TO_ADDR
10776: GO 10843
10778: LD_INT 51
10780: DOUBLE
10781: GREATEREQUAL
10782: IFFALSE 10790
10784: LD_INT 75
10786: DOUBLE
10787: LESSEQUAL
10788: IFTRUE 10792
10790: GO 10810
10792: POP
// ar := [ Ar2Out1 , Ar1Out1 ] ; 76 .. 100 :
10793: LD_ADDR_VAR 0 3
10797: PUSH
10798: LD_INT 13
10800: PUSH
10801: LD_INT 21
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: ST_TO_ADDR
10808: GO 10843
10810: LD_INT 76
10812: DOUBLE
10813: GREATEREQUAL
10814: IFFALSE 10822
10816: LD_INT 100
10818: DOUBLE
10819: LESSEQUAL
10820: IFTRUE 10824
10822: GO 10842
10824: POP
// ar := [ Ar2Out3 , Ar1Out3 ] ; end ; 86 .. 100 :
10825: LD_ADDR_VAR 0 3
10829: PUSH
10830: LD_INT 18
10832: PUSH
10833: LD_INT 24
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: ST_TO_ADDR
10840: GO 10843
10842: POP
10843: GO 10878
10845: LD_INT 86
10847: DOUBLE
10848: GREATEREQUAL
10849: IFFALSE 10857
10851: LD_INT 100
10853: DOUBLE
10854: LESSEQUAL
10855: IFTRUE 10859
10857: GO 10877
10859: POP
// ar := [ valley , valley ] ; end ;
10860: LD_ADDR_VAR 0 3
10864: PUSH
10865: LD_INT 12
10867: PUSH
10868: LD_INT 12
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: ST_TO_ADDR
10875: GO 10878
10877: POP
// arr1 := arr1 ^ [ ar [ 1 ] ] ;
10878: LD_ADDR_LOC 15
10882: PUSH
10883: LD_LOC 15
10887: PUSH
10888: LD_VAR 0 3
10892: PUSH
10893: LD_INT 1
10895: ARRAY
10896: PUSH
10897: EMPTY
10898: LIST
10899: ADD
10900: ST_TO_ADDR
// arr2 := arr2 ^ [ ar [ 2 ] ] ;
10901: LD_ADDR_LOC 16
10905: PUSH
10906: LD_LOC 16
10910: PUSH
10911: LD_VAR 0 3
10915: PUSH
10916: LD_INT 2
10918: ARRAY
10919: PUSH
10920: EMPTY
10921: LIST
10922: ADD
10923: ST_TO_ADDR
// end ;
10924: GO 10389
10926: POP
10927: POP
// for i := 1 to max_arriving_times div 2 do
10928: LD_ADDR_VAR 0 2
10932: PUSH
10933: DOUBLE
10934: LD_INT 1
10936: DEC
10937: ST_TO_ADDR
10938: LD_EXP 30
10942: PUSH
10943: LD_INT 2
10945: DIV
10946: PUSH
10947: FOR_TO
10948: IFFALSE 11060
// begin p1 := Rand ( 1 , max_arriving_times ) ;
10950: LD_ADDR_VAR 0 4
10954: PUSH
10955: LD_INT 1
10957: PPUSH
10958: LD_EXP 30
10962: PPUSH
10963: CALL_OW 12
10967: ST_TO_ADDR
// p2 := Rand ( 1 , max_arriving_times ) ;
10968: LD_ADDR_VAR 0 5
10972: PUSH
10973: LD_INT 1
10975: PPUSH
10976: LD_EXP 30
10980: PPUSH
10981: CALL_OW 12
10985: ST_TO_ADDR
// pom1 := arr2 [ p1 ] ;
10986: LD_ADDR_VAR 0 6
10990: PUSH
10991: LD_LOC 16
10995: PUSH
10996: LD_VAR 0 4
11000: ARRAY
11001: ST_TO_ADDR
// pom2 := arr2 [ p2 ] ;
11002: LD_ADDR_VAR 0 7
11006: PUSH
11007: LD_LOC 16
11011: PUSH
11012: LD_VAR 0 5
11016: ARRAY
11017: ST_TO_ADDR
// arr2 := Replace ( Replace ( arr2 , p2 , pom1 ) , p1 , pom2 ) ;
11018: LD_ADDR_LOC 16
11022: PUSH
11023: LD_LOC 16
11027: PPUSH
11028: LD_VAR 0 5
11032: PPUSH
11033: LD_VAR 0 6
11037: PPUSH
11038: CALL_OW 1
11042: PPUSH
11043: LD_VAR 0 4
11047: PPUSH
11048: LD_VAR 0 7
11052: PPUSH
11053: CALL_OW 1
11057: ST_TO_ADDR
// end ;
11058: GO 10947
11060: POP
11061: POP
// end ;
11062: LD_VAR 0 1
11066: RET
// every 0 0$1 do
11067: GO 11069
11069: DISABLE
// begin if not max_arriving_times then
11070: LD_EXP 30
11074: NOT
11075: IFFALSE 11079
// exit ;
11077: GO 11162
// if tick >= max_arriving_times [ 1 ] * 0 0$30 then
11079: LD_OWVAR 1
11083: PUSH
11084: LD_EXP 30
11088: PUSH
11089: LD_INT 1
11091: ARRAY
11092: PUSH
11093: LD_INT 1050
11095: MUL
11096: GREATEREQUAL
11097: IFFALSE 11161
// begin new1 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11099: LD_ADDR_LOC 13
11103: PUSH
11104: LD_INT 1
11106: PPUSH
11107: LD_EXP 30
11111: PUSH
11112: LD_INT 1050
11114: MUL
11115: PPUSH
11116: CALL_OW 12
11120: ST_TO_ADDR
// new2 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11121: LD_ADDR_LOC 14
11125: PUSH
11126: LD_INT 1
11128: PPUSH
11129: LD_EXP 30
11133: PUSH
11134: LD_INT 1050
11136: MUL
11137: PPUSH
11138: CALL_OW 12
11142: ST_TO_ADDR
// max_arriving_times := delete ( max_arriving_times , 1 ) ;
11143: LD_ADDR_EXP 30
11147: PUSH
11148: LD_EXP 30
11152: PPUSH
11153: LD_INT 1
11155: PPUSH
11156: CALL_OW 3
11160: ST_TO_ADDR
// end ; enable ;
11161: ENABLE
// end ;
11162: END
// function new_arrival ( pos ) ; var hum ; begin
11163: LD_INT 0
11165: PPUSH
11166: PPUSH
// if def_people_loyality then
11167: LD_EXP 12
11171: IFFALSE 11213
// begin uc_side := second_side [ pos ] ;
11173: LD_ADDR_OWVAR 20
11177: PUSH
11178: LD_EXP 46
11182: PUSH
11183: LD_VAR 0 1
11187: ARRAY
11188: ST_TO_ADDR
// uc_nation := Side_Nations [ positions [ pos ] ] ;
11189: LD_ADDR_OWVAR 21
11193: PUSH
11194: LD_EXP 43
11198: PUSH
11199: LD_EXP 37
11203: PUSH
11204: LD_VAR 0 1
11208: ARRAY
11209: ARRAY
11210: ST_TO_ADDR
// end else
11211: GO 11233
// begin uc_side := second_side ;
11213: LD_ADDR_OWVAR 20
11217: PUSH
11218: LD_EXP 46
11222: ST_TO_ADDR
// uc_nation := third_nation ;
11223: LD_ADDR_OWVAR 21
11227: PUSH
11228: LD_EXP 47
11232: ST_TO_ADDR
// end ; PrepareHuman ( 0 , 0 , initial_level + 1 ) ;
11233: LD_INT 0
11235: PPUSH
11236: LD_INT 0
11238: PPUSH
11239: LD_EXP 26
11243: PUSH
11244: LD_INT 1
11246: PLUS
11247: PPUSH
11248: CALL_OW 380
// hc_class := class_soldier ;
11252: LD_ADDR_OWVAR 28
11256: PUSH
11257: LD_INT 1
11259: ST_TO_ADDR
// hum := CreateHuman ;
11260: LD_ADDR_VAR 0 3
11264: PUSH
11265: CALL_OW 44
11269: ST_TO_ADDR
// if pos = 1 then
11270: LD_VAR 0 1
11274: PUSH
11275: LD_INT 1
11277: EQUAL
11278: IFFALSE 11321
// begin PlaceUnitArea ( hum , arr1 [ 1 ] , true ) ;
11280: LD_VAR 0 3
11284: PPUSH
11285: LD_LOC 15
11289: PUSH
11290: LD_INT 1
11292: ARRAY
11293: PPUSH
11294: LD_INT 1
11296: PPUSH
11297: CALL_OW 49
// arr1 := delete ( arr1 , 1 ) ;
11301: LD_ADDR_LOC 15
11305: PUSH
11306: LD_LOC 15
11310: PPUSH
11311: LD_INT 1
11313: PPUSH
11314: CALL_OW 3
11318: ST_TO_ADDR
// end else
11319: GO 11360
// begin PlaceUnitArea ( hum , arr2 [ 1 ] , true ) ;
11321: LD_VAR 0 3
11325: PPUSH
11326: LD_LOC 16
11330: PUSH
11331: LD_INT 1
11333: ARRAY
11334: PPUSH
11335: LD_INT 1
11337: PPUSH
11338: CALL_OW 49
// arr2 := delete ( arr2 , 1 ) ;
11342: LD_ADDR_LOC 16
11346: PUSH
11347: LD_LOC 16
11351: PPUSH
11352: LD_INT 1
11354: PPUSH
11355: CALL_OW 3
11359: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) until IsPlaced ( hum ) ;
11360: LD_INT 35
11362: PPUSH
11363: CALL_OW 67
11367: LD_VAR 0 3
11371: PPUSH
11372: CALL_OW 305
11376: IFFALSE 11360
// if def_people_loyality then
11378: LD_EXP 12
11382: IFFALSE 11442
// if pos = 1 then
11384: LD_VAR 0 1
11388: PUSH
11389: LD_INT 1
11391: EQUAL
11392: IFFALSE 11412
// free1 := free1 ^ hum else
11394: LD_ADDR_LOC 11
11398: PUSH
11399: LD_LOC 11
11403: PUSH
11404: LD_VAR 0 3
11408: ADD
11409: ST_TO_ADDR
11410: GO 11440
// if pos = 2 then
11412: LD_VAR 0 1
11416: PUSH
11417: LD_INT 2
11419: EQUAL
11420: IFFALSE 11440
// free2 := free2 ^ hum else
11422: LD_ADDR_LOC 12
11426: PUSH
11427: LD_LOC 12
11431: PUSH
11432: LD_VAR 0 3
11436: ADD
11437: ST_TO_ADDR
11438: GO 11440
// else
11440: GO 11458
// free := free ^ hum ;
11442: LD_ADDR_LOC 10
11446: PUSH
11447: LD_LOC 10
11451: PUSH
11452: LD_VAR 0 3
11456: ADD
11457: ST_TO_ADDR
// end ;
11458: LD_VAR 0 2
11462: RET
// every 0 0$0.5 trigger new1 do var d ;
11463: LD_LOC 13
11467: IFFALSE 11500
11469: GO 11471
11471: DISABLE
11472: LD_INT 0
11474: PPUSH
// begin enable ;
11475: ENABLE
// new1 := 0 ;
11476: LD_ADDR_LOC 13
11480: PUSH
11481: LD_INT 0
11483: ST_TO_ADDR
// wait ( d ) ;
11484: LD_VAR 0 1
11488: PPUSH
11489: CALL_OW 67
// new_arrival ( 1 ) ;
11493: LD_INT 1
11495: PPUSH
11496: CALL 11163 0 1
// end ;
11500: PPOPN 1
11502: END
// every 0 0$0.5 trigger new2 do var d ;
11503: LD_LOC 14
11507: IFFALSE 11540
11509: GO 11511
11511: DISABLE
11512: LD_INT 0
11514: PPUSH
// begin enable ;
11515: ENABLE
// new2 := 0 ;
11516: LD_ADDR_LOC 14
11520: PUSH
11521: LD_INT 0
11523: ST_TO_ADDR
// wait ( d ) ;
11524: LD_VAR 0 1
11528: PPUSH
11529: CALL_OW 67
// new_arrival ( 2 ) ;
11533: LD_INT 2
11535: PPUSH
11536: CALL 11163 0 1
// end ;
11540: PPOPN 1
11542: END
// function check_one_side ( un , side ) ; begin
11543: LD_INT 0
11545: PPUSH
// if FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , side ] , [ f_dist , un , 3 ] ] ) then
11546: LD_INT 21
11548: PUSH
11549: LD_INT 1
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 22
11558: PUSH
11559: LD_VAR 0 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 91
11570: PUSH
11571: LD_VAR 0 1
11575: PUSH
11576: LD_INT 3
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: LIST
11588: PPUSH
11589: CALL_OW 69
11593: IFFALSE 11607
// result := side else
11595: LD_ADDR_VAR 0 3
11599: PUSH
11600: LD_VAR 0 2
11604: ST_TO_ADDR
11605: GO 11615
// result := 0 ;
11607: LD_ADDR_VAR 0 3
11611: PUSH
11612: LD_INT 0
11614: ST_TO_ADDR
// end ;
11615: LD_VAR 0 3
11619: RET
// function check_two_sides ( un , side1 , side2 ) ; var un1 , s1 , s2 ; begin
11620: LD_INT 0
11622: PPUSH
11623: PPUSH
11624: PPUSH
11625: PPUSH
// s1 := 0 ;
11626: LD_ADDR_VAR 0 6
11630: PUSH
11631: LD_INT 0
11633: ST_TO_ADDR
// s2 := 0 ;
11634: LD_ADDR_VAR 0 7
11638: PUSH
11639: LD_INT 0
11641: ST_TO_ADDR
// for un1 in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_dist , un , 3 ] ] ) do
11642: LD_ADDR_VAR 0 5
11646: PUSH
11647: LD_INT 21
11649: PUSH
11650: LD_INT 1
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 91
11659: PUSH
11660: LD_VAR 0 1
11664: PUSH
11665: LD_INT 3
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PPUSH
11677: CALL_OW 69
11681: PUSH
11682: FOR_IN
11683: IFFALSE 11751
// begin if GetSide ( un1 ) = side1 then
11685: LD_VAR 0 5
11689: PPUSH
11690: CALL_OW 255
11694: PUSH
11695: LD_VAR 0 2
11699: EQUAL
11700: IFFALSE 11718
// s1 := s1 + 1 else
11702: LD_ADDR_VAR 0 6
11706: PUSH
11707: LD_VAR 0 6
11711: PUSH
11712: LD_INT 1
11714: PLUS
11715: ST_TO_ADDR
11716: GO 11749
// if GetSide ( un1 ) = side2 then
11718: LD_VAR 0 5
11722: PPUSH
11723: CALL_OW 255
11727: PUSH
11728: LD_VAR 0 3
11732: EQUAL
11733: IFFALSE 11749
// s2 := s2 + 1 ;
11735: LD_ADDR_VAR 0 7
11739: PUSH
11740: LD_VAR 0 7
11744: PUSH
11745: LD_INT 1
11747: PLUS
11748: ST_TO_ADDR
// end ;
11749: GO 11682
11751: POP
11752: POP
// if s1 = s2 then
11753: LD_VAR 0 6
11757: PUSH
11758: LD_VAR 0 7
11762: EQUAL
11763: IFFALSE 11775
// result := 0 else
11765: LD_ADDR_VAR 0 4
11769: PUSH
11770: LD_INT 0
11772: ST_TO_ADDR
11773: GO 11805
// if s1 > s2 then
11775: LD_VAR 0 6
11779: PUSH
11780: LD_VAR 0 7
11784: GREATER
11785: IFFALSE 11797
// result := 1 else
11787: LD_ADDR_VAR 0 4
11791: PUSH
11792: LD_INT 1
11794: ST_TO_ADDR
11795: GO 11805
// result := 2 ;
11797: LD_ADDR_VAR 0 4
11801: PUSH
11802: LD_INT 2
11804: ST_TO_ADDR
// end ;
11805: LD_VAR 0 4
11809: RET
// every 0 0$2 do var un ;
11810: GO 11812
11812: DISABLE
11813: LD_INT 0
11815: PPUSH
// begin if def_people_loyality then
11816: LD_EXP 12
11820: IFFALSE 12199
// if not fog_info then
11822: LD_EXP 32
11826: NOT
11827: IFFALSE 12015
// begin if your_side then
11829: LD_OWVAR 2
11833: IFFALSE 12013
// if side_positions [ your_side ] = 1 then
11835: LD_EXP 42
11839: PUSH
11840: LD_OWVAR 2
11844: ARRAY
11845: PUSH
11846: LD_INT 1
11848: EQUAL
11849: IFFALSE 11925
// begin un := UnitFilter ( free1 diff seenby1 , [ f_see , your_side ] ) ;
11851: LD_ADDR_VAR 0 1
11855: PUSH
11856: LD_LOC 11
11860: PUSH
11861: LD_LOC 17
11865: DIFF
11866: PPUSH
11867: LD_INT 101
11869: PUSH
11870: LD_OWVAR 2
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PPUSH
11879: CALL_OW 72
11883: ST_TO_ADDR
// if un then
11884: LD_VAR 0 1
11888: IFFALSE 11923
// begin CenterNowOnUnits ( un [ 1 ] ) ;
11890: LD_VAR 0 1
11894: PUSH
11895: LD_INT 1
11897: ARRAY
11898: PPUSH
11899: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
11903: LD_ADDR_LOC 17
11907: PUSH
11908: LD_LOC 17
11912: PUSH
11913: LD_VAR 0 1
11917: PUSH
11918: LD_INT 1
11920: ARRAY
11921: ADD
11922: ST_TO_ADDR
// end ; end else
11923: GO 12013
// if side_positions [ your_side ] = 2 then
11925: LD_EXP 42
11929: PUSH
11930: LD_OWVAR 2
11934: ARRAY
11935: PUSH
11936: LD_INT 2
11938: EQUAL
11939: IFFALSE 12013
// begin un := UnitFilter ( free2 diff seenby2 , [ f_see , your_side ] ) ;
11941: LD_ADDR_VAR 0 1
11945: PUSH
11946: LD_LOC 12
11950: PUSH
11951: LD_LOC 18
11955: DIFF
11956: PPUSH
11957: LD_INT 101
11959: PUSH
11960: LD_OWVAR 2
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PPUSH
11969: CALL_OW 72
11973: ST_TO_ADDR
// if un then
11974: LD_VAR 0 1
11978: IFFALSE 12013
// begin CenterNowOnUnits ( un [ 1 ] ) ;
11980: LD_VAR 0 1
11984: PUSH
11985: LD_INT 1
11987: ARRAY
11988: PPUSH
11989: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
11993: LD_ADDR_LOC 18
11997: PUSH
11998: LD_LOC 18
12002: PUSH
12003: LD_VAR 0 1
12007: PUSH
12008: LD_INT 1
12010: ARRAY
12011: ADD
12012: ST_TO_ADDR
// end ; end ; end else
12013: GO 12199
// begin if your_side then
12015: LD_OWVAR 2
12019: IFFALSE 12199
// if side_positions [ your_side ] = 1 then
12021: LD_EXP 42
12025: PUSH
12026: LD_OWVAR 2
12030: ARRAY
12031: PUSH
12032: LD_INT 1
12034: EQUAL
12035: IFFALSE 12111
// begin un := UnitFilter ( free diff seenby1 , [ f_see , your_side ] ) ;
12037: LD_ADDR_VAR 0 1
12041: PUSH
12042: LD_LOC 10
12046: PUSH
12047: LD_LOC 17
12051: DIFF
12052: PPUSH
12053: LD_INT 101
12055: PUSH
12056: LD_OWVAR 2
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PPUSH
12065: CALL_OW 72
12069: ST_TO_ADDR
// if un then
12070: LD_VAR 0 1
12074: IFFALSE 12109
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12076: LD_VAR 0 1
12080: PUSH
12081: LD_INT 1
12083: ARRAY
12084: PPUSH
12085: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12089: LD_ADDR_LOC 17
12093: PUSH
12094: LD_LOC 17
12098: PUSH
12099: LD_VAR 0 1
12103: PUSH
12104: LD_INT 1
12106: ARRAY
12107: ADD
12108: ST_TO_ADDR
// end ; end else
12109: GO 12199
// if side_positions [ your_side ] = 2 then
12111: LD_EXP 42
12115: PUSH
12116: LD_OWVAR 2
12120: ARRAY
12121: PUSH
12122: LD_INT 2
12124: EQUAL
12125: IFFALSE 12199
// begin un := UnitFilter ( free diff seenby2 , [ f_see , your_side ] ) ;
12127: LD_ADDR_VAR 0 1
12131: PUSH
12132: LD_LOC 10
12136: PUSH
12137: LD_LOC 18
12141: DIFF
12142: PPUSH
12143: LD_INT 101
12145: PUSH
12146: LD_OWVAR 2
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PPUSH
12155: CALL_OW 72
12159: ST_TO_ADDR
// if un then
12160: LD_VAR 0 1
12164: IFFALSE 12199
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12166: LD_VAR 0 1
12170: PUSH
12171: LD_INT 1
12173: ARRAY
12174: PPUSH
12175: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
12179: LD_ADDR_LOC 18
12183: PUSH
12184: LD_LOC 18
12188: PUSH
12189: LD_VAR 0 1
12193: PUSH
12194: LD_INT 1
12196: ARRAY
12197: ADD
12198: ST_TO_ADDR
// end ; end ; end ; enable ;
12199: ENABLE
// end ;
12200: PPOPN 1
12202: END
// every 0 0$0.5 do var un , s ;
12203: GO 12205
12205: DISABLE
12206: LD_INT 0
12208: PPUSH
12209: PPUSH
// begin if def_people_loyality then
12210: LD_EXP 12
12214: IFFALSE 12420
// begin for un in free1 do
12216: LD_ADDR_VAR 0 1
12220: PUSH
12221: LD_LOC 11
12225: PUSH
12226: FOR_IN
12227: IFFALSE 12315
// if not IsLive ( un ) then
12229: LD_VAR 0 1
12233: PPUSH
12234: CALL_OW 300
12238: NOT
12239: IFFALSE 12259
// free1 := free1 diff un else
12241: LD_ADDR_LOC 11
12245: PUSH
12246: LD_LOC 11
12250: PUSH
12251: LD_VAR 0 1
12255: DIFF
12256: ST_TO_ADDR
12257: GO 12313
// if check_one_side ( un , positions [ 1 ] ) then
12259: LD_VAR 0 1
12263: PPUSH
12264: LD_EXP 37
12268: PUSH
12269: LD_INT 1
12271: ARRAY
12272: PPUSH
12273: CALL 11543 0 2
12277: IFFALSE 12313
// begin SetSide ( un , positions [ 1 ] ) ;
12279: LD_VAR 0 1
12283: PPUSH
12284: LD_EXP 37
12288: PUSH
12289: LD_INT 1
12291: ARRAY
12292: PPUSH
12293: CALL_OW 235
// free1 := free1 diff un ;
12297: LD_ADDR_LOC 11
12301: PUSH
12302: LD_LOC 11
12306: PUSH
12307: LD_VAR 0 1
12311: DIFF
12312: ST_TO_ADDR
// end ;
12313: GO 12226
12315: POP
12316: POP
// for un in free2 do
12317: LD_ADDR_VAR 0 1
12321: PUSH
12322: LD_LOC 12
12326: PUSH
12327: FOR_IN
12328: IFFALSE 12416
// if not IsLive ( un ) then
12330: LD_VAR 0 1
12334: PPUSH
12335: CALL_OW 300
12339: NOT
12340: IFFALSE 12360
// free2 := free2 diff un else
12342: LD_ADDR_LOC 12
12346: PUSH
12347: LD_LOC 12
12351: PUSH
12352: LD_VAR 0 1
12356: DIFF
12357: ST_TO_ADDR
12358: GO 12414
// if check_one_side ( un , positions [ 2 ] ) then
12360: LD_VAR 0 1
12364: PPUSH
12365: LD_EXP 37
12369: PUSH
12370: LD_INT 2
12372: ARRAY
12373: PPUSH
12374: CALL 11543 0 2
12378: IFFALSE 12414
// begin SetSide ( un , positions [ 2 ] ) ;
12380: LD_VAR 0 1
12384: PPUSH
12385: LD_EXP 37
12389: PUSH
12390: LD_INT 2
12392: ARRAY
12393: PPUSH
12394: CALL_OW 235
// free2 := free2 diff un ;
12398: LD_ADDR_LOC 12
12402: PUSH
12403: LD_LOC 12
12407: PUSH
12408: LD_VAR 0 1
12412: DIFF
12413: ST_TO_ADDR
// end ;
12414: GO 12327
12416: POP
12417: POP
// end else
12418: GO 12542
// begin for un in free do
12420: LD_ADDR_VAR 0 1
12424: PUSH
12425: LD_LOC 10
12429: PUSH
12430: FOR_IN
12431: IFFALSE 12540
// if not IsLive ( un ) then
12433: LD_VAR 0 1
12437: PPUSH
12438: CALL_OW 300
12442: NOT
12443: IFFALSE 12463
// free := free diff un else
12445: LD_ADDR_LOC 10
12449: PUSH
12450: LD_LOC 10
12454: PUSH
12455: LD_VAR 0 1
12459: DIFF
12460: ST_TO_ADDR
12461: GO 12538
// begin s := check_two_sides ( un , positions [ 1 ] , positions [ 2 ] ) ;
12463: LD_ADDR_VAR 0 2
12467: PUSH
12468: LD_VAR 0 1
12472: PPUSH
12473: LD_EXP 37
12477: PUSH
12478: LD_INT 1
12480: ARRAY
12481: PPUSH
12482: LD_EXP 37
12486: PUSH
12487: LD_INT 2
12489: ARRAY
12490: PPUSH
12491: CALL 11620 0 3
12495: ST_TO_ADDR
// if s then
12496: LD_VAR 0 2
12500: IFFALSE 12538
// begin SetSide ( un , positions [ s ] ) ;
12502: LD_VAR 0 1
12506: PPUSH
12507: LD_EXP 37
12511: PUSH
12512: LD_VAR 0 2
12516: ARRAY
12517: PPUSH
12518: CALL_OW 235
// free := free diff un ;
12522: LD_ADDR_LOC 10
12526: PUSH
12527: LD_LOC 10
12531: PUSH
12532: LD_VAR 0 1
12536: DIFF
12537: ST_TO_ADDR
// end ; end ;
12538: GO 12430
12540: POP
12541: POP
// end ; enable ;
12542: ENABLE
// end ; end_of_file
12543: PPOPN 2
12545: END
// export function DisplayNames ; var i ; begin
12546: LD_INT 0
12548: PPUSH
12549: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
12550: LD_ADDR_VAR 0 2
12554: PUSH
12555: LD_INT 2
12557: PUSH
12558: LD_INT 30
12560: PUSH
12561: LD_INT 0
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 30
12570: PUSH
12571: LD_INT 1
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: LIST
12582: PPUSH
12583: CALL_OW 69
12587: PUSH
12588: FOR_IN
12589: IFFALSE 12616
// SetBName ( i , @ & GetSide ( i ) ) ;
12591: LD_VAR 0 2
12595: PPUSH
12596: LD_STRING @
12598: PUSH
12599: LD_VAR 0 2
12603: PPUSH
12604: CALL_OW 255
12608: STR
12609: PPUSH
12610: CALL_OW 500
12614: GO 12588
12616: POP
12617: POP
// end ;
12618: LD_VAR 0 1
12622: RET
// every 0 0$2 do
12623: GO 12625
12625: DISABLE
// DisplayNames ;
12626: CALL 12546 0 0
12630: END
// on BuildingComplete ( b ) do DisplayNames ;
12631: CALL 12546 0 0
12635: PPOPN 1
12637: END
// on BuildingStarted ( b , h ) do DisplayNames ;
12638: CALL 12546 0 0
12642: PPOPN 2
12644: END
// on BuildingCaptured ( b , o , e ) do DisplayNames ;
12645: CALL 12546 0 0
12649: PPOPN 3
12651: END
